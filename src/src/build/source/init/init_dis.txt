
D:/VisualStudioProjects/guanfang/diy-x86os-master/start/test/build/source/init/init.elf:     file format elf32-i386
D:/VisualStudioProjects/guanfang/diy-x86os-master/start/test/build/source/init/init.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x82000000

Program Header:
    LOAD off    0x00001000 vaddr 0x82000000 paddr 0x82000000 align 2**12
         filesz 0x00002010 memsz 0x00002074 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017ab  82000000  82000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000004  820017ac  820017ac  000027ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000850  820017c0  820017c0  000027c0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  82002020  82002020  00003010  2**5
                  ALLOC
  4 .debug_line   000011df  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007bc7  00000000  00000000  000041ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000197f  00000000  00000000  0000bdb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000198  00000000  00000000  0000d738  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000b09  00000000  00000000  0000d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000023  00000000  00000000  0000e3d9  2**0
                  CONTENTS, READONLY
 10 .debug_frame  000005a4  00000000  00000000  0000e3fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line_str 00000395  00000000  00000000  0000e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
82000000 l    d  .text	00000000 .text
820017ac l    d  .rodata	00000000 .rodata
820017c0 l    d  .data	00000000 .data
82002020 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 cstart.c
00000000 l    df *ABS*	00000000 lib_syscall.c
8200004e l     F .text	0000004c sys_call
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
820017c0 l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
820004c2 l     F .text	00000293 malloc_extend_top
00000000 l    df *ABS*	00000000 mlock.c
82002068 l     O .bss	00000004 __malloc_recursive_mutex
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
8200206c l     O .bss	00000004 __atexit_recursive_mutex
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reent.c
82001614 g     F .text	00000037 cleanup_glue
82000152 g     F .text	0000001b yield
82000308 g     F .text	00000033 ioctl
82000f7d g     F .text	00000006 __malloc_unlock
82002070 g     O .bss	00000004 errno
82000125 g     F .text	0000002d execve
820000c8 g     F .text	0000001b getpid
82000489 g     F .text	0000001c malloc
820002a5 g     F .text	00000021 isatty
82002020 g     O .bss	00000004 __malloc_top_pad
82002020 g       .bss	00000000 __bss_start__
82000f83 g     F .text	00000040 _sbrk_r
820003a6 g     F .text	00000040 readdir
82002024 g     O .bss	00000004 __malloc_max_sbrked_mem
82000251 g     F .text	0000002d lseek
820017ac g     O .rodata	00000004 _global_impure_ptr
8200164b g     F .text	00000160 _reclaim_reent
82000203 g     F .text	0000002d write
8200027e g     F .text	00000027 fstat
82002074 g       .bss	00000000 __bss_end__
820010d8 g     F .text	000003db _free_r
8200016d g     F .text	00000021 wait
82000fc3 g     F .text	00000115 __call_exitprocs
8200200c g     O .data	00000004 __malloc_sbrk_base
82000000 g       .text	00000000 _start
820001d6 g     F .text	0000002d read
82002040 g     O .bss	00000028 __malloc_current_mallinfo
8200041a g     F .text	00000021 unlink
8200010a g     F .text	0000001b fork
82001c00 g     O .data	00000408 __malloc_av_
82000f77 g     F .text	00000006 __malloc_lock
820002c6 g     F .text	00000021 sbrk
82000010 g     F .text	0000003e cstart
8200043b g     F .text	0000000a main
82002028 g     O .bss	00000004 __malloc_max_total_mem
82000755 g     F .text	00000822 _malloc_r
8200033b g     F .text	0000006b opendir
820014b3 g     F .text	00000161 _malloc_trim_r
820002e7 g     F .text	00000021 dup
82001be4 g     O .data	00000004 _impure_ptr
820000e3 g     F .text	00000027 print_msg
82002008 g     O .data	00000004 __malloc_trim_threshold
82000445 g     F .text	00000044 exit
8200018e g     F .text	00000021 _exit
820001af g     F .text	00000027 open
820003e6 g     F .text	00000034 closedir
8200009a g     F .text	0000002e msleep
82000230 g     F .text	00000021 close
820004a5 g     F .text	0000001d free



Disassembly of section .text:

82000000 <_start>:
    .global _start
    .extern cstart
_start:
    # 设置各数据段的选择子,由于应用任务都是用tss恢复的，所以
    # 实际不必设置，但为安全起见，还是设置一下
    mov %ss, %ax
82000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
82000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
82000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
82000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
82000009:	8e e8                	mov    %eax,%gs

    # 进入主函数执行，注意此时栈没有变，参数仍然在其中
    # 所以调用cstart时，仍然可以看到参数
    jmp cstart
8200000b:	e9 00 00 00 00       	jmp    82000010 <cstart>

82000010 <cstart>:
extern uint8_t __bss_start__[], __bss_end__[];

/**
 * @brief 应用的初始化，C部分
 */
void cstart (int argc, char ** argv) {
82000010:	55                   	push   %ebp
82000011:	89 e5                	mov    %esp,%ebp
82000013:	83 ec 18             	sub    $0x18,%esp
    // 清空bss区，注意这是必须的！！！
    // 像newlib库中有些代码就依赖于此，未清空时数据未知，导致调用sbrk时申请很大内存空间
    uint8_t * start = __bss_start__;
82000016:	c7 45 f4 20 20 00 82 	movl   $0x82002020,-0xc(%ebp)
    while (start < __bss_end__) {
8200001d:	eb 0c                	jmp    8200002b <cstart+0x1b>
        *start++ = 0;
8200001f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000022:	8d 50 01             	lea    0x1(%eax),%edx
82000025:	89 55 f4             	mov    %edx,-0xc(%ebp)
82000028:	c6 00 00             	movb   $0x0,(%eax)
    while (start < __bss_end__) {
8200002b:	81 7d f4 74 20 00 82 	cmpl   $0x82002074,-0xc(%ebp)
82000032:	72 eb                	jb     8200001f <cstart+0xf>
    }

    exit(main(argc, argv));
82000034:	83 ec 08             	sub    $0x8,%esp
82000037:	ff 75 0c             	pushl  0xc(%ebp)
8200003a:	ff 75 08             	pushl  0x8(%ebp)
8200003d:	e8 f9 03 00 00       	call   8200043b <main>
82000042:	83 c4 10             	add    $0x10,%esp
82000045:	83 ec 0c             	sub    $0xc,%esp
82000048:	50                   	push   %eax
82000049:	e8 f7 03 00 00       	call   82000445 <exit>

8200004e <sys_call>:
#include <string.h>

/**
 * 执行系统调用
 */
static inline int sys_call (syscall_args_t * args) {
8200004e:	55                   	push   %ebp
8200004f:	89 e5                	mov    %esp,%ebp
82000051:	57                   	push   %edi
82000052:	56                   	push   %esi
82000053:	53                   	push   %ebx
82000054:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0};  // 使用特权级0
82000057:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
8200005e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
            :"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
82000065:	8b 45 08             	mov    0x8(%ebp),%eax
82000068:	8b 40 10             	mov    0x10(%eax),%eax
8200006b:	8b 55 08             	mov    0x8(%ebp),%edx
8200006e:	8b 52 0c             	mov    0xc(%edx),%edx
82000071:	8b 4d 08             	mov    0x8(%ebp),%ecx
82000074:	8b 49 08             	mov    0x8(%ecx),%ecx
    [arg0]"r"(args->arg0), [id]"r"(args->id),
82000077:	8b 5d 08             	mov    0x8(%ebp),%ebx
8200007a:	8b 5b 04             	mov    0x4(%ebx),%ebx
8200007d:	8b 75 08             	mov    0x8(%ebp),%esi
82000080:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
82000082:	8d 7d e8             	lea    -0x18(%ebp),%edi
82000085:	50                   	push   %eax
82000086:	52                   	push   %edx
82000087:	51                   	push   %ecx
82000088:	53                   	push   %ebx
82000089:	56                   	push   %esi
8200008a:	ff 1f                	lcall  *(%edi)
8200008c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    [gate]"r"(sys_gate_addr));
    return ret;
8200008f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
82000092:	83 c4 10             	add    $0x10,%esp
82000095:	5b                   	pop    %ebx
82000096:	5e                   	pop    %esi
82000097:	5f                   	pop    %edi
82000098:	5d                   	pop    %ebp
82000099:	c3                   	ret    

8200009a <msleep>:

int msleep (int ms) {
8200009a:	55                   	push   %ebp
8200009b:	89 e5                	mov    %esp,%ebp
8200009d:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
820000a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
820000a4:	7f 07                	jg     820000ad <msleep+0x13>
        return 0;
820000a6:	b8 00 00 00 00       	mov    $0x0,%eax
820000ab:	eb 19                	jmp    820000c6 <msleep+0x2c>
    }

    syscall_args_t args;
    args.id = SYS_msleep;
820000ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
820000b4:	8b 45 08             	mov    0x8(%ebp),%eax
820000b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
820000ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000bd:	50                   	push   %eax
820000be:	e8 8b ff ff ff       	call   8200004e <sys_call>
820000c3:	83 c4 04             	add    $0x4,%esp
}
820000c6:	c9                   	leave  
820000c7:	c3                   	ret    

820000c8 <getpid>:

int getpid() {
820000c8:	55                   	push   %ebp
820000c9:	89 e5                	mov    %esp,%ebp
820000cb:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
820000ce:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
820000d5:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000d8:	50                   	push   %eax
820000d9:	e8 70 ff ff ff       	call   8200004e <sys_call>
820000de:	83 c4 04             	add    $0x4,%esp
}
820000e1:	c9                   	leave  
820000e2:	c3                   	ret    

820000e3 <print_msg>:

int print_msg(char * fmt, int arg) {
820000e3:	55                   	push   %ebp
820000e4:	89 e5                	mov    %esp,%ebp
820000e6:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
820000e9:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
820000f0:	8b 45 08             	mov    0x8(%ebp),%eax
820000f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
820000f6:	8b 45 0c             	mov    0xc(%ebp),%eax
820000f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
820000fc:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000ff:	50                   	push   %eax
82000100:	e8 49 ff ff ff       	call   8200004e <sys_call>
82000105:	83 c4 04             	add    $0x4,%esp
}
82000108:	c9                   	leave  
82000109:	c3                   	ret    

8200010a <fork>:

int fork() {
8200010a:	55                   	push   %ebp
8200010b:	89 e5                	mov    %esp,%ebp
8200010d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
82000110:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
82000117:	8d 45 ec             	lea    -0x14(%ebp),%eax
8200011a:	50                   	push   %eax
8200011b:	e8 2e ff ff ff       	call   8200004e <sys_call>
82000120:	83 c4 04             	add    $0x4,%esp
}
82000123:	c9                   	leave  
82000124:	c3                   	ret    

82000125 <execve>:

int execve(const char *name, char * const *argv, char * const *env) {
82000125:	55                   	push   %ebp
82000126:	89 e5                	mov    %esp,%ebp
82000128:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
8200012b:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
82000132:	8b 45 08             	mov    0x8(%ebp),%eax
82000135:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
82000138:	8b 45 0c             	mov    0xc(%ebp),%eax
8200013b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
8200013e:	8b 45 10             	mov    0x10(%ebp),%eax
82000141:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
82000144:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000147:	50                   	push   %eax
82000148:	e8 01 ff ff ff       	call   8200004e <sys_call>
8200014d:	83 c4 04             	add    $0x4,%esp
}
82000150:	c9                   	leave  
82000151:	c3                   	ret    

82000152 <yield>:

int yield (void) {
82000152:	55                   	push   %ebp
82000153:	89 e5                	mov    %esp,%ebp
82000155:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
82000158:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
8200015f:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000162:	50                   	push   %eax
82000163:	e8 e6 fe ff ff       	call   8200004e <sys_call>
82000168:	83 c4 04             	add    $0x4,%esp
}
8200016b:	c9                   	leave  
8200016c:	c3                   	ret    

8200016d <wait>:

int wait(int* status) {
8200016d:	55                   	push   %ebp
8200016e:	89 e5                	mov    %esp,%ebp
82000170:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
82000173:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
8200017a:	8b 45 08             	mov    0x8(%ebp),%eax
8200017d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
82000180:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000183:	50                   	push   %eax
82000184:	e8 c5 fe ff ff       	call   8200004e <sys_call>
82000189:	83 c4 04             	add    $0x4,%esp
}
8200018c:	c9                   	leave  
8200018d:	c3                   	ret    

8200018e <_exit>:

void _exit(int status) {
8200018e:	55                   	push   %ebp
8200018f:	89 e5                	mov    %esp,%ebp
82000191:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
82000194:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
8200019b:	8b 45 08             	mov    0x8(%ebp),%eax
8200019e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
820001a1:	8d 45 ec             	lea    -0x14(%ebp),%eax
820001a4:	50                   	push   %eax
820001a5:	e8 a4 fe ff ff       	call   8200004e <sys_call>
820001aa:	83 c4 04             	add    $0x4,%esp
    for (;;) {}
820001ad:	eb fe                	jmp    820001ad <_exit+0x1f>

820001af <open>:
}

int open(const char *name, int flags, ...) {
820001af:	55                   	push   %ebp
820001b0:	89 e5                	mov    %esp,%ebp
820001b2:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
820001b5:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
820001bc:	8b 45 08             	mov    0x8(%ebp),%eax
820001bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
820001c2:	8b 45 0c             	mov    0xc(%ebp),%eax
820001c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
820001c8:	8d 45 ec             	lea    -0x14(%ebp),%eax
820001cb:	50                   	push   %eax
820001cc:	e8 7d fe ff ff       	call   8200004e <sys_call>
820001d1:	83 c4 04             	add    $0x4,%esp
}
820001d4:	c9                   	leave  
820001d5:	c3                   	ret    

820001d6 <read>:

int read(int file, char *ptr, int len) {
820001d6:	55                   	push   %ebp
820001d7:	89 e5                	mov    %esp,%ebp
820001d9:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
820001dc:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
820001e3:	8b 45 08             	mov    0x8(%ebp),%eax
820001e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
820001e9:	8b 45 0c             	mov    0xc(%ebp),%eax
820001ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
820001ef:	8b 45 10             	mov    0x10(%ebp),%eax
820001f2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
820001f5:	8d 45 ec             	lea    -0x14(%ebp),%eax
820001f8:	50                   	push   %eax
820001f9:	e8 50 fe ff ff       	call   8200004e <sys_call>
820001fe:	83 c4 04             	add    $0x4,%esp
}
82000201:	c9                   	leave  
82000202:	c3                   	ret    

82000203 <write>:

int write(int file, char *ptr, int len) {
82000203:	55                   	push   %ebp
82000204:	89 e5                	mov    %esp,%ebp
82000206:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
82000209:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
82000210:	8b 45 08             	mov    0x8(%ebp),%eax
82000213:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
82000216:	8b 45 0c             	mov    0xc(%ebp),%eax
82000219:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8200021c:	8b 45 10             	mov    0x10(%ebp),%eax
8200021f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
82000222:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000225:	50                   	push   %eax
82000226:	e8 23 fe ff ff       	call   8200004e <sys_call>
8200022b:	83 c4 04             	add    $0x4,%esp
}
8200022e:	c9                   	leave  
8200022f:	c3                   	ret    

82000230 <close>:

int close(int file) {
82000230:	55                   	push   %ebp
82000231:	89 e5                	mov    %esp,%ebp
82000233:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
82000236:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
8200023d:	8b 45 08             	mov    0x8(%ebp),%eax
82000240:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
82000243:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000246:	50                   	push   %eax
82000247:	e8 02 fe ff ff       	call   8200004e <sys_call>
8200024c:	83 c4 04             	add    $0x4,%esp
}
8200024f:	c9                   	leave  
82000250:	c3                   	ret    

82000251 <lseek>:

int lseek(int file, int ptr, int dir) {
82000251:	55                   	push   %ebp
82000252:	89 e5                	mov    %esp,%ebp
82000254:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
82000257:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
8200025e:	8b 45 08             	mov    0x8(%ebp),%eax
82000261:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
82000264:	8b 45 0c             	mov    0xc(%ebp),%eax
82000267:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
8200026a:	8b 45 10             	mov    0x10(%ebp),%eax
8200026d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
82000270:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000273:	50                   	push   %eax
82000274:	e8 d5 fd ff ff       	call   8200004e <sys_call>
82000279:	83 c4 04             	add    $0x4,%esp
}
8200027c:	c9                   	leave  
8200027d:	c3                   	ret    

8200027e <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st) {
8200027e:	55                   	push   %ebp
8200027f:	89 e5                	mov    %esp,%ebp
82000281:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
82000284:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
8200028b:	8b 45 08             	mov    0x8(%ebp),%eax
8200028e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
82000291:	8b 45 0c             	mov    0xc(%ebp),%eax
82000294:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
82000297:	8d 45 ec             	lea    -0x14(%ebp),%eax
8200029a:	50                   	push   %eax
8200029b:	e8 ae fd ff ff       	call   8200004e <sys_call>
820002a0:	83 c4 04             	add    $0x4,%esp
}
820002a3:	c9                   	leave  
820002a4:	c3                   	ret    

820002a5 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file) {
820002a5:	55                   	push   %ebp
820002a6:	89 e5                	mov    %esp,%ebp
820002a8:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
820002ab:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
820002b2:	8b 45 08             	mov    0x8(%ebp),%eax
820002b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
820002b8:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002bb:	50                   	push   %eax
820002bc:	e8 8d fd ff ff       	call   8200004e <sys_call>
820002c1:	83 c4 04             	add    $0x4,%esp
}
820002c4:	c9                   	leave  
820002c5:	c3                   	ret    

820002c6 <sbrk>:

void * sbrk(ptrdiff_t incr) {
820002c6:	55                   	push   %ebp
820002c7:	89 e5                	mov    %esp,%ebp
820002c9:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
820002cc:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
820002d3:	8b 45 08             	mov    0x8(%ebp),%eax
820002d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
820002d9:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002dc:	50                   	push   %eax
820002dd:	e8 6c fd ff ff       	call   8200004e <sys_call>
820002e2:	83 c4 04             	add    $0x4,%esp
}
820002e5:	c9                   	leave  
820002e6:	c3                   	ret    

820002e7 <dup>:

int dup (int file) {
820002e7:	55                   	push   %ebp
820002e8:	89 e5                	mov    %esp,%ebp
820002ea:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
820002ed:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
820002f4:	8b 45 08             	mov    0x8(%ebp),%eax
820002f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
820002fa:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002fd:	50                   	push   %eax
820002fe:	e8 4b fd ff ff       	call   8200004e <sys_call>
82000303:	83 c4 04             	add    $0x4,%esp
}
82000306:	c9                   	leave  
82000307:	c3                   	ret    

82000308 <ioctl>:

int ioctl(int fd, int cmd, int arg0, int arg1) {
82000308:	55                   	push   %ebp
82000309:	89 e5                	mov    %esp,%ebp
8200030b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_ioctl;
8200030e:	c7 45 ec 3b 00 00 00 	movl   $0x3b,-0x14(%ebp)
    args.arg0 = fd;
82000315:	8b 45 08             	mov    0x8(%ebp),%eax
82000318:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = cmd;
8200031b:	8b 45 0c             	mov    0xc(%ebp),%eax
8200031e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = arg0;
82000321:	8b 45 10             	mov    0x10(%ebp),%eax
82000324:	89 45 f8             	mov    %eax,-0x8(%ebp)
    args.arg3 = arg1;
82000327:	8b 45 14             	mov    0x14(%ebp),%eax
8200032a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return sys_call(&args);
8200032d:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000330:	50                   	push   %eax
82000331:	e8 18 fd ff ff       	call   8200004e <sys_call>
82000336:	83 c4 04             	add    $0x4,%esp
}
82000339:	c9                   	leave  
8200033a:	c3                   	ret    

8200033b <opendir>:

DIR * opendir(const char * name) {
8200033b:	55                   	push   %ebp
8200033c:	89 e5                	mov    %esp,%ebp
8200033e:	83 ec 28             	sub    $0x28,%esp
    DIR * dir = (DIR *)malloc(sizeof(DIR));
82000341:	83 ec 0c             	sub    $0xc,%esp
82000344:	68 10 01 00 00       	push   $0x110
82000349:	e8 3b 01 00 00       	call   82000489 <malloc>
8200034e:	83 c4 10             	add    $0x10,%esp
82000351:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dir == (DIR *)0) {
82000354:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
82000358:	75 07                	jne    82000361 <opendir+0x26>
        return (DIR *)0;
8200035a:	b8 00 00 00 00       	mov    $0x0,%eax
8200035f:	eb 43                	jmp    820003a4 <opendir+0x69>
    }

    syscall_args_t args;
    args.id = SYS_opendir;
82000361:	c7 45 dc 3c 00 00 00 	movl   $0x3c,-0x24(%ebp)
    args.arg0 = (int)name;
82000368:	8b 45 08             	mov    0x8(%ebp),%eax
8200036b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    args.arg1 = (int)dir;
8200036e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000371:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int err = sys_call(&args);
82000374:	83 ec 0c             	sub    $0xc,%esp
82000377:	8d 45 dc             	lea    -0x24(%ebp),%eax
8200037a:	50                   	push   %eax
8200037b:	e8 ce fc ff ff       	call   8200004e <sys_call>
82000380:	83 c4 10             	add    $0x10,%esp
82000383:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (err < 0) {
82000386:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8200038a:	79 15                	jns    820003a1 <opendir+0x66>
        free(dir);
8200038c:	83 ec 0c             	sub    $0xc,%esp
8200038f:	ff 75 f4             	pushl  -0xc(%ebp)
82000392:	e8 0e 01 00 00       	call   820004a5 <free>
82000397:	83 c4 10             	add    $0x10,%esp
        return (DIR *)0;
8200039a:	b8 00 00 00 00       	mov    $0x0,%eax
8200039f:	eb 03                	jmp    820003a4 <opendir+0x69>
    }
    return dir;
820003a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
820003a4:	c9                   	leave  
820003a5:	c3                   	ret    

820003a6 <readdir>:

struct dirent* readdir(DIR* dir) {
820003a6:	55                   	push   %ebp
820003a7:	89 e5                	mov    %esp,%ebp
820003a9:	83 ec 20             	sub    $0x20,%esp

    syscall_args_t args;
    args.id = SYS_readdir;
820003ac:	c7 45 e8 3d 00 00 00 	movl   $0x3d,-0x18(%ebp)
    args.arg0 = (int)dir;
820003b3:	8b 45 08             	mov    0x8(%ebp),%eax
820003b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    args.arg1 = (int)&dir->dirent;
820003b9:	8b 45 08             	mov    0x8(%ebp),%eax
820003bc:	83 c0 04             	add    $0x4,%eax
820003bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = sys_call(&args);
820003c2:	8d 45 e8             	lea    -0x18(%ebp),%eax
820003c5:	50                   	push   %eax
820003c6:	e8 83 fc ff ff       	call   8200004e <sys_call>
820003cb:	83 c4 04             	add    $0x4,%esp
820003ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (err < 0) {
820003d1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
820003d5:	79 07                	jns    820003de <readdir+0x38>
        return (struct dirent *)0;
820003d7:	b8 00 00 00 00       	mov    $0x0,%eax
820003dc:	eb 06                	jmp    820003e4 <readdir+0x3e>
    }
    return &dir->dirent;
820003de:	8b 45 08             	mov    0x8(%ebp),%eax
820003e1:	83 c0 04             	add    $0x4,%eax
}
820003e4:	c9                   	leave  
820003e5:	c3                   	ret    

820003e6 <closedir>:

int closedir(DIR *dir) {
820003e6:	55                   	push   %ebp
820003e7:	89 e5                	mov    %esp,%ebp
820003e9:	83 ec 28             	sub    $0x28,%esp
    syscall_args_t args;
    args.id = SYS_closedir;
820003ec:	c7 45 e4 3e 00 00 00 	movl   $0x3e,-0x1c(%ebp)
    args.arg0 = (int)dir;
820003f3:	8b 45 08             	mov    0x8(%ebp),%eax
820003f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    sys_call(&args);
820003f9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
820003fc:	50                   	push   %eax
820003fd:	e8 4c fc ff ff       	call   8200004e <sys_call>
82000402:	83 c4 04             	add    $0x4,%esp

    free(dir);
82000405:	83 ec 0c             	sub    $0xc,%esp
82000408:	ff 75 08             	pushl  0x8(%ebp)
8200040b:	e8 95 00 00 00       	call   820004a5 <free>
82000410:	83 c4 10             	add    $0x10,%esp
    return 0;
82000413:	b8 00 00 00 00       	mov    $0x0,%eax
}
82000418:	c9                   	leave  
82000419:	c3                   	ret    

8200041a <unlink>:

int unlink(const char *path) {
8200041a:	55                   	push   %ebp
8200041b:	89 e5                	mov    %esp,%ebp
8200041d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_unlink;
82000420:	c7 45 ec 3f 00 00 00 	movl   $0x3f,-0x14(%ebp)
    args.arg0 = (int)path;
82000427:	8b 45 08             	mov    0x8(%ebp),%eax
8200042a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
8200042d:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000430:	50                   	push   %eax
82000431:	e8 18 fc ff ff       	call   8200004e <sys_call>
82000436:	83 c4 04             	add    $0x4,%esp
}
82000439:	c9                   	leave  
8200043a:	c3                   	ret    

8200043b <main>:
 * 作者：李述铜
 * 联系邮箱: 527676163@qq.com
 */
#include <stdio.h>

int main (int argc, char ** argv) {
8200043b:	55                   	push   %ebp
8200043c:	89 e5                	mov    %esp,%ebp
    // *(char *)0 = 0x1234;

    // int a = 3 / 0;
    return 0;
8200043e:	b8 00 00 00 00       	mov    $0x0,%eax
}
82000443:	5d                   	pop    %ebp
82000444:	c3                   	ret    

82000445 <exit>:
82000445:	55                   	push   %ebp
82000446:	89 e5                	mov    %esp,%ebp
82000448:	83 ec 08             	sub    $0x8,%esp
8200044b:	83 ec 08             	sub    $0x8,%esp
8200044e:	6a 00                	push   $0x0
82000450:	ff 75 08             	pushl  0x8(%ebp)
82000453:	e8 6b 0b 00 00       	call   82000fc3 <__call_exitprocs>
82000458:	83 c4 10             	add    $0x10,%esp
8200045b:	a1 ac 17 00 82       	mov    0x820017ac,%eax
82000460:	8b 40 3c             	mov    0x3c(%eax),%eax
82000463:	85 c0                	test   %eax,%eax
82000465:	74 17                	je     8200047e <exit+0x39>
82000467:	a1 ac 17 00 82       	mov    0x820017ac,%eax
8200046c:	8b 40 3c             	mov    0x3c(%eax),%eax
8200046f:	8b 15 ac 17 00 82    	mov    0x820017ac,%edx
82000475:	83 ec 0c             	sub    $0xc,%esp
82000478:	52                   	push   %edx
82000479:	ff d0                	call   *%eax
8200047b:	83 c4 10             	add    $0x10,%esp
8200047e:	83 ec 0c             	sub    $0xc,%esp
82000481:	ff 75 08             	pushl  0x8(%ebp)
82000484:	e8 05 fd ff ff       	call   8200018e <_exit>

82000489 <malloc>:
82000489:	55                   	push   %ebp
8200048a:	89 e5                	mov    %esp,%ebp
8200048c:	83 ec 08             	sub    $0x8,%esp
8200048f:	a1 e4 1b 00 82       	mov    0x82001be4,%eax
82000494:	83 ec 08             	sub    $0x8,%esp
82000497:	ff 75 08             	pushl  0x8(%ebp)
8200049a:	50                   	push   %eax
8200049b:	e8 b5 02 00 00       	call   82000755 <_malloc_r>
820004a0:	83 c4 10             	add    $0x10,%esp
820004a3:	c9                   	leave  
820004a4:	c3                   	ret    

820004a5 <free>:
820004a5:	55                   	push   %ebp
820004a6:	89 e5                	mov    %esp,%ebp
820004a8:	83 ec 08             	sub    $0x8,%esp
820004ab:	a1 e4 1b 00 82       	mov    0x82001be4,%eax
820004b0:	83 ec 08             	sub    $0x8,%esp
820004b3:	ff 75 08             	pushl  0x8(%ebp)
820004b6:	50                   	push   %eax
820004b7:	e8 1c 0c 00 00       	call   820010d8 <_free_r>
820004bc:	83 c4 10             	add    $0x10,%esp
820004bf:	90                   	nop
820004c0:	c9                   	leave  
820004c1:	c3                   	ret    

820004c2 <malloc_extend_top>:
820004c2:	55                   	push   %ebp
820004c3:	89 e5                	mov    %esp,%ebp
820004c5:	83 ec 38             	sub    $0x38,%esp
820004c8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
820004cf:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
820004d4:	8b 40 08             	mov    0x8(%eax),%eax
820004d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
820004da:	8b 45 e0             	mov    -0x20(%ebp),%eax
820004dd:	8b 40 04             	mov    0x4(%eax),%eax
820004e0:	83 e0 fc             	and    $0xfffffffc,%eax
820004e3:	89 45 dc             	mov    %eax,-0x24(%ebp)
820004e6:	8b 55 e0             	mov    -0x20(%ebp),%edx
820004e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
820004ec:	01 d0                	add    %edx,%eax
820004ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
820004f1:	8b 15 20 20 00 82    	mov    0x82002020,%edx
820004f7:	8b 45 0c             	mov    0xc(%ebp),%eax
820004fa:	01 d0                	add    %edx,%eax
820004fc:	83 c0 10             	add    $0x10,%eax
820004ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000502:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
82000509:	a1 0c 20 00 82       	mov    0x8200200c,%eax
8200050e:	83 f8 ff             	cmp    $0xffffffff,%eax
82000511:	74 15                	je     82000528 <malloc_extend_top+0x66>
82000513:	8b 55 d4             	mov    -0x2c(%ebp),%edx
82000516:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000519:	01 d0                	add    %edx,%eax
8200051b:	8d 50 ff             	lea    -0x1(%eax),%edx
8200051e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000521:	f7 d8                	neg    %eax
82000523:	21 d0                	and    %edx,%eax
82000525:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000528:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200052b:	83 ec 08             	sub    $0x8,%esp
8200052e:	50                   	push   %eax
8200052f:	ff 75 08             	pushl  0x8(%ebp)
82000532:	e8 4c 0a 00 00       	call   82000f83 <_sbrk_r>
82000537:	83 c4 10             	add    $0x10,%esp
8200053a:	89 45 f4             	mov    %eax,-0xc(%ebp)
8200053d:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
82000541:	0f 84 0b 02 00 00    	je     82000752 <malloc_extend_top+0x290>
82000547:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200054a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
8200054d:	73 0e                	jae    8200055d <malloc_extend_top+0x9b>
8200054f:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000554:	39 45 e0             	cmp    %eax,-0x20(%ebp)
82000557:	0f 85 f5 01 00 00    	jne    82000752 <malloc_extend_top+0x290>
8200055d:	a1 40 20 00 82       	mov    0x82002040,%eax
82000562:	89 c2                	mov    %eax,%edx
82000564:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000567:	01 d0                	add    %edx,%eax
82000569:	a3 40 20 00 82       	mov    %eax,0x82002040
8200056e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000571:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000574:	75 30                	jne    820005a6 <malloc_extend_top+0xe4>
82000576:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000579:	8d 50 ff             	lea    -0x1(%eax),%edx
8200057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
8200057f:	21 d0                	and    %edx,%eax
82000581:	85 c0                	test   %eax,%eax
82000583:	75 21                	jne    820005a6 <malloc_extend_top+0xe4>
82000585:	8b 55 e8             	mov    -0x18(%ebp),%edx
82000588:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200058b:	01 d0                	add    %edx,%eax
8200058d:	89 45 d0             	mov    %eax,-0x30(%ebp)
82000590:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000595:	8b 40 08             	mov    0x8(%eax),%eax
82000598:	8b 55 d0             	mov    -0x30(%ebp),%edx
8200059b:	83 ca 01             	or     $0x1,%edx
8200059e:	89 50 04             	mov    %edx,0x4(%eax)
820005a1:	e9 76 01 00 00       	jmp    8200071c <malloc_extend_top+0x25a>
820005a6:	a1 0c 20 00 82       	mov    0x8200200c,%eax
820005ab:	83 f8 ff             	cmp    $0xffffffff,%eax
820005ae:	75 0a                	jne    820005ba <malloc_extend_top+0xf8>
820005b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005b3:	a3 0c 20 00 82       	mov    %eax,0x8200200c
820005b8:	eb 13                	jmp    820005cd <malloc_extend_top+0x10b>
820005ba:	8b 15 40 20 00 82    	mov    0x82002040,%edx
820005c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005c3:	2b 45 d8             	sub    -0x28(%ebp),%eax
820005c6:	01 d0                	add    %edx,%eax
820005c8:	a3 40 20 00 82       	mov    %eax,0x82002040
820005cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005d0:	83 c0 08             	add    $0x8,%eax
820005d3:	83 e0 07             	and    $0x7,%eax
820005d6:	89 45 cc             	mov    %eax,-0x34(%ebp)
820005d9:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
820005dd:	74 13                	je     820005f2 <malloc_extend_top+0x130>
820005df:	b8 08 00 00 00       	mov    $0x8,%eax
820005e4:	2b 45 cc             	sub    -0x34(%ebp),%eax
820005e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
820005ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
820005ed:	01 45 f4             	add    %eax,-0xc(%ebp)
820005f0:	eb 07                	jmp    820005f9 <malloc_extend_top+0x137>
820005f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
820005f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
820005fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
820005ff:	01 d0                	add    %edx,%eax
82000601:	89 c2                	mov    %eax,%edx
82000603:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000606:	83 e8 01             	sub    $0x1,%eax
82000609:	21 c2                	and    %eax,%edx
8200060b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8200060e:	29 d0                	sub    %edx,%eax
82000610:	01 45 f0             	add    %eax,-0x10(%ebp)
82000613:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000616:	83 e8 01             	sub    $0x1,%eax
82000619:	21 45 f0             	and    %eax,-0x10(%ebp)
8200061c:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200061f:	83 ec 08             	sub    $0x8,%esp
82000622:	50                   	push   %eax
82000623:	ff 75 08             	pushl  0x8(%ebp)
82000626:	e8 58 09 00 00       	call   82000f83 <_sbrk_r>
8200062b:	83 c4 10             	add    $0x10,%esp
8200062e:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000631:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
82000635:	75 28                	jne    8200065f <malloc_extend_top+0x19d>
82000637:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
8200063e:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
82000645:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000648:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200064b:	01 d0                	add    %edx,%eax
8200064d:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000650:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
82000654:	74 09                	je     8200065f <malloc_extend_top+0x19d>
82000656:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000659:	83 e8 08             	sub    $0x8,%eax
8200065c:	01 45 ec             	add    %eax,-0x14(%ebp)
8200065f:	a1 40 20 00 82       	mov    0x82002040,%eax
82000664:	89 c2                	mov    %eax,%edx
82000666:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000669:	01 d0                	add    %edx,%eax
8200066b:	a3 40 20 00 82       	mov    %eax,0x82002040
82000670:	ba 00 1c 00 82       	mov    $0x82001c00,%edx
82000675:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000678:	89 42 08             	mov    %eax,0x8(%edx)
8200067b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200067e:	2b 45 f4             	sub    -0xc(%ebp),%eax
82000681:	89 c2                	mov    %eax,%edx
82000683:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000686:	01 d0                	add    %edx,%eax
82000688:	89 45 d0             	mov    %eax,-0x30(%ebp)
8200068b:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000690:	8b 40 08             	mov    0x8(%eax),%eax
82000693:	8b 55 d0             	mov    -0x30(%ebp),%edx
82000696:	83 ca 01             	or     $0x1,%edx
82000699:	89 50 04             	mov    %edx,0x4(%eax)
8200069c:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
820006a1:	39 45 e0             	cmp    %eax,-0x20(%ebp)
820006a4:	74 76                	je     8200071c <malloc_extend_top+0x25a>
820006a6:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
820006aa:	77 14                	ja     820006c0 <malloc_extend_top+0x1fe>
820006ac:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
820006b1:	8b 40 08             	mov    0x8(%eax),%eax
820006b4:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
820006bb:	e9 93 00 00 00       	jmp    82000753 <malloc_extend_top+0x291>
820006c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
820006c3:	83 e8 0c             	sub    $0xc,%eax
820006c6:	83 e0 f8             	and    $0xfffffff8,%eax
820006c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
820006cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
820006cf:	8b 40 04             	mov    0x4(%eax),%eax
820006d2:	83 e0 01             	and    $0x1,%eax
820006d5:	0b 45 dc             	or     -0x24(%ebp),%eax
820006d8:	89 c2                	mov    %eax,%edx
820006da:	8b 45 e0             	mov    -0x20(%ebp),%eax
820006dd:	89 50 04             	mov    %edx,0x4(%eax)
820006e0:	8b 55 e0             	mov    -0x20(%ebp),%edx
820006e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
820006e6:	01 d0                	add    %edx,%eax
820006e8:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
820006ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
820006f2:	8d 50 04             	lea    0x4(%eax),%edx
820006f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
820006f8:	01 d0                	add    %edx,%eax
820006fa:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
82000701:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
82000705:	76 15                	jbe    8200071c <malloc_extend_top+0x25a>
82000707:	8b 45 e0             	mov    -0x20(%ebp),%eax
8200070a:	83 c0 08             	add    $0x8,%eax
8200070d:	83 ec 08             	sub    $0x8,%esp
82000710:	50                   	push   %eax
82000711:	ff 75 08             	pushl  0x8(%ebp)
82000714:	e8 bf 09 00 00       	call   820010d8 <_free_r>
82000719:	83 c4 10             	add    $0x10,%esp
8200071c:	a1 40 20 00 82       	mov    0x82002040,%eax
82000721:	89 c2                	mov    %eax,%edx
82000723:	a1 24 20 00 82       	mov    0x82002024,%eax
82000728:	39 c2                	cmp    %eax,%edx
8200072a:	76 0a                	jbe    82000736 <malloc_extend_top+0x274>
8200072c:	a1 40 20 00 82       	mov    0x82002040,%eax
82000731:	a3 24 20 00 82       	mov    %eax,0x82002024
82000736:	a1 40 20 00 82       	mov    0x82002040,%eax
8200073b:	89 c2                	mov    %eax,%edx
8200073d:	a1 28 20 00 82       	mov    0x82002028,%eax
82000742:	39 c2                	cmp    %eax,%edx
82000744:	76 0d                	jbe    82000753 <malloc_extend_top+0x291>
82000746:	a1 40 20 00 82       	mov    0x82002040,%eax
8200074b:	a3 28 20 00 82       	mov    %eax,0x82002028
82000750:	eb 01                	jmp    82000753 <malloc_extend_top+0x291>
82000752:	90                   	nop
82000753:	c9                   	leave  
82000754:	c3                   	ret    

82000755 <_malloc_r>:
82000755:	55                   	push   %ebp
82000756:	89 e5                	mov    %esp,%ebp
82000758:	53                   	push   %ebx
82000759:	83 ec 44             	sub    $0x44,%esp
8200075c:	8b 45 0c             	mov    0xc(%ebp),%eax
8200075f:	83 c0 0b             	add    $0xb,%eax
82000762:	83 f8 16             	cmp    $0x16,%eax
82000765:	76 0b                	jbe    82000772 <_malloc_r+0x1d>
82000767:	8b 45 0c             	mov    0xc(%ebp),%eax
8200076a:	83 c0 0b             	add    $0xb,%eax
8200076d:	83 e0 f8             	and    $0xfffffff8,%eax
82000770:	eb 05                	jmp    82000777 <_malloc_r+0x22>
82000772:	b8 10 00 00 00       	mov    $0x10,%eax
82000777:	89 45 d0             	mov    %eax,-0x30(%ebp)
8200077a:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200077d:	85 c0                	test   %eax,%eax
8200077f:	78 08                	js     82000789 <_malloc_r+0x34>
82000781:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000784:	3b 45 0c             	cmp    0xc(%ebp),%eax
82000787:	73 13                	jae    8200079c <_malloc_r+0x47>
82000789:	8b 45 08             	mov    0x8(%ebp),%eax
8200078c:	c7 00 0c 00 00 00    	movl   $0xc,(%eax)
82000792:	b8 00 00 00 00       	mov    $0x0,%eax
82000797:	e9 d6 07 00 00       	jmp    82000f72 <_malloc_r+0x81d>
8200079c:	83 ec 0c             	sub    $0xc,%esp
8200079f:	ff 75 08             	pushl  0x8(%ebp)
820007a2:	e8 d0 07 00 00       	call   82000f77 <__malloc_lock>
820007a7:	83 c4 10             	add    $0x10,%esp
820007aa:	81 7d d0 f7 01 00 00 	cmpl   $0x1f7,-0x30(%ebp)
820007b1:	0f 87 b0 00 00 00    	ja     82000867 <_malloc_r+0x112>
820007b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
820007ba:	c1 e8 03             	shr    $0x3,%eax
820007bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
820007c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
820007c3:	83 c0 01             	add    $0x1,%eax
820007c6:	01 c0                	add    %eax,%eax
820007c8:	c1 e0 02             	shl    $0x2,%eax
820007cb:	05 00 1c 00 82       	add    $0x82001c00,%eax
820007d0:	83 e8 08             	sub    $0x8,%eax
820007d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
820007d6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
820007d9:	8b 40 0c             	mov    0xc(%eax),%eax
820007dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
820007df:	8b 45 f4             	mov    -0xc(%ebp),%eax
820007e2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
820007e5:	75 0d                	jne    820007f4 <_malloc_r+0x9f>
820007e7:	83 45 d4 08          	addl   $0x8,-0x2c(%ebp)
820007eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
820007ee:	8b 40 0c             	mov    0xc(%eax),%eax
820007f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
820007f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
820007f7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
820007fa:	74 62                	je     8200085e <_malloc_r+0x109>
820007fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
820007ff:	8b 40 04             	mov    0x4(%eax),%eax
82000802:	83 e0 fc             	and    $0xfffffffc,%eax
82000805:	89 45 cc             	mov    %eax,-0x34(%ebp)
82000808:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200080b:	8b 40 0c             	mov    0xc(%eax),%eax
8200080e:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000811:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000814:	8b 40 08             	mov    0x8(%eax),%eax
82000817:	89 45 dc             	mov    %eax,-0x24(%ebp)
8200081a:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200081d:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000820:	89 50 0c             	mov    %edx,0xc(%eax)
82000823:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000826:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000829:	89 50 08             	mov    %edx,0x8(%eax)
8200082c:	8b 55 f4             	mov    -0xc(%ebp),%edx
8200082f:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000832:	01 d0                	add    %edx,%eax
82000834:	8b 50 04             	mov    0x4(%eax),%edx
82000837:	8b 4d f4             	mov    -0xc(%ebp),%ecx
8200083a:	8b 45 cc             	mov    -0x34(%ebp),%eax
8200083d:	01 c8                	add    %ecx,%eax
8200083f:	83 ca 01             	or     $0x1,%edx
82000842:	89 50 04             	mov    %edx,0x4(%eax)
82000845:	83 ec 0c             	sub    $0xc,%esp
82000848:	ff 75 08             	pushl  0x8(%ebp)
8200084b:	e8 2d 07 00 00       	call   82000f7d <__malloc_unlock>
82000850:	83 c4 10             	add    $0x10,%esp
82000853:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000856:	83 c0 08             	add    $0x8,%eax
82000859:	e9 14 07 00 00       	jmp    82000f72 <_malloc_r+0x81d>
8200085e:	83 45 f0 02          	addl   $0x2,-0x10(%ebp)
82000862:	e9 46 01 00 00       	jmp    820009ad <_malloc_r+0x258>
82000867:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200086a:	c1 e8 09             	shr    $0x9,%eax
8200086d:	85 c0                	test   %eax,%eax
8200086f:	75 08                	jne    82000879 <_malloc_r+0x124>
82000871:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000874:	c1 e8 03             	shr    $0x3,%eax
82000877:	eb 77                	jmp    820008f0 <_malloc_r+0x19b>
82000879:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200087c:	c1 e8 09             	shr    $0x9,%eax
8200087f:	83 f8 04             	cmp    $0x4,%eax
82000882:	77 0b                	ja     8200088f <_malloc_r+0x13a>
82000884:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000887:	c1 e8 06             	shr    $0x6,%eax
8200088a:	83 c0 38             	add    $0x38,%eax
8200088d:	eb 61                	jmp    820008f0 <_malloc_r+0x19b>
8200088f:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000892:	c1 e8 09             	shr    $0x9,%eax
82000895:	83 f8 14             	cmp    $0x14,%eax
82000898:	77 0b                	ja     820008a5 <_malloc_r+0x150>
8200089a:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200089d:	c1 e8 09             	shr    $0x9,%eax
820008a0:	83 c0 5b             	add    $0x5b,%eax
820008a3:	eb 4b                	jmp    820008f0 <_malloc_r+0x19b>
820008a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008a8:	c1 e8 09             	shr    $0x9,%eax
820008ab:	83 f8 54             	cmp    $0x54,%eax
820008ae:	77 0b                	ja     820008bb <_malloc_r+0x166>
820008b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008b3:	c1 e8 0c             	shr    $0xc,%eax
820008b6:	83 c0 6e             	add    $0x6e,%eax
820008b9:	eb 35                	jmp    820008f0 <_malloc_r+0x19b>
820008bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008be:	c1 e8 09             	shr    $0x9,%eax
820008c1:	3d 54 01 00 00       	cmp    $0x154,%eax
820008c6:	77 0b                	ja     820008d3 <_malloc_r+0x17e>
820008c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008cb:	c1 e8 0f             	shr    $0xf,%eax
820008ce:	83 c0 77             	add    $0x77,%eax
820008d1:	eb 1d                	jmp    820008f0 <_malloc_r+0x19b>
820008d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008d6:	c1 e8 09             	shr    $0x9,%eax
820008d9:	3d 54 05 00 00       	cmp    $0x554,%eax
820008de:	77 0b                	ja     820008eb <_malloc_r+0x196>
820008e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008e3:	c1 e8 12             	shr    $0x12,%eax
820008e6:	83 c0 7c             	add    $0x7c,%eax
820008e9:	eb 05                	jmp    820008f0 <_malloc_r+0x19b>
820008eb:	b8 7e 00 00 00       	mov    $0x7e,%eax
820008f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
820008f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
820008f6:	83 c0 01             	add    $0x1,%eax
820008f9:	01 c0                	add    %eax,%eax
820008fb:	c1 e0 02             	shl    $0x2,%eax
820008fe:	05 00 1c 00 82       	add    $0x82001c00,%eax
82000903:	83 e8 08             	sub    $0x8,%eax
82000906:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000909:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200090c:	8b 40 0c             	mov    0xc(%eax),%eax
8200090f:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000912:	e9 86 00 00 00       	jmp    8200099d <_malloc_r+0x248>
82000917:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200091a:	8b 40 04             	mov    0x4(%eax),%eax
8200091d:	83 e0 fc             	and    $0xfffffffc,%eax
82000920:	89 45 cc             	mov    %eax,-0x34(%ebp)
82000923:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000926:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000929:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200092c:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000930:	7e 06                	jle    82000938 <_malloc_r+0x1e3>
82000932:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
82000936:	eb 71                	jmp    820009a9 <_malloc_r+0x254>
82000938:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
8200093c:	78 56                	js     82000994 <_malloc_r+0x23f>
8200093e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000941:	8b 40 0c             	mov    0xc(%eax),%eax
82000944:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000947:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200094a:	8b 40 08             	mov    0x8(%eax),%eax
8200094d:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000950:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000953:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000956:	89 50 0c             	mov    %edx,0xc(%eax)
82000959:	8b 45 d8             	mov    -0x28(%ebp),%eax
8200095c:	8b 55 dc             	mov    -0x24(%ebp),%edx
8200095f:	89 50 08             	mov    %edx,0x8(%eax)
82000962:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000965:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000968:	01 d0                	add    %edx,%eax
8200096a:	8b 50 04             	mov    0x4(%eax),%edx
8200096d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000970:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000973:	01 c8                	add    %ecx,%eax
82000975:	83 ca 01             	or     $0x1,%edx
82000978:	89 50 04             	mov    %edx,0x4(%eax)
8200097b:	83 ec 0c             	sub    $0xc,%esp
8200097e:	ff 75 08             	pushl  0x8(%ebp)
82000981:	e8 f7 05 00 00       	call   82000f7d <__malloc_unlock>
82000986:	83 c4 10             	add    $0x10,%esp
82000989:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200098c:	83 c0 08             	add    $0x8,%eax
8200098f:	e9 de 05 00 00       	jmp    82000f72 <_malloc_r+0x81d>
82000994:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000997:	8b 40 0c             	mov    0xc(%eax),%eax
8200099a:	89 45 f4             	mov    %eax,-0xc(%ebp)
8200099d:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009a0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
820009a3:	0f 85 6e ff ff ff    	jne    82000917 <_malloc_r+0x1c2>
820009a9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
820009ad:	b8 08 1c 00 82       	mov    $0x82001c08,%eax
820009b2:	8b 40 08             	mov    0x8(%eax),%eax
820009b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
820009b8:	b8 08 1c 00 82       	mov    $0x82001c08,%eax
820009bd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
820009c0:	0f 84 9c 02 00 00    	je     82000c62 <_malloc_r+0x50d>
820009c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009c9:	8b 40 04             	mov    0x4(%eax),%eax
820009cc:	83 e0 fc             	and    $0xfffffffc,%eax
820009cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
820009d2:	8b 45 cc             	mov    -0x34(%ebp),%eax
820009d5:	2b 45 d0             	sub    -0x30(%ebp),%eax
820009d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
820009db:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
820009df:	7e 7a                	jle    82000a5b <_malloc_r+0x306>
820009e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
820009e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
820009e7:	01 d0                	add    %edx,%eax
820009e9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
820009ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
820009ef:	83 c8 01             	or     $0x1,%eax
820009f2:	89 c2                	mov    %eax,%edx
820009f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009f7:	89 50 04             	mov    %edx,0x4(%eax)
820009fa:	b8 08 1c 00 82       	mov    $0x82001c08,%eax
820009ff:	8b 55 c4             	mov    -0x3c(%ebp),%edx
82000a02:	89 50 0c             	mov    %edx,0xc(%eax)
82000a05:	ba 08 1c 00 82       	mov    $0x82001c08,%edx
82000a0a:	8b 40 0c             	mov    0xc(%eax),%eax
82000a0d:	89 42 08             	mov    %eax,0x8(%edx)
82000a10:	ba 08 1c 00 82       	mov    $0x82001c08,%edx
82000a15:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a18:	89 50 0c             	mov    %edx,0xc(%eax)
82000a1b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a1e:	8b 50 0c             	mov    0xc(%eax),%edx
82000a21:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a24:	89 50 08             	mov    %edx,0x8(%eax)
82000a27:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000a2a:	83 c8 01             	or     $0x1,%eax
82000a2d:	89 c2                	mov    %eax,%edx
82000a2f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a32:	89 50 04             	mov    %edx,0x4(%eax)
82000a35:	8b 55 e8             	mov    -0x18(%ebp),%edx
82000a38:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a3b:	01 c2                	add    %eax,%edx
82000a3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000a40:	89 02                	mov    %eax,(%edx)
82000a42:	83 ec 0c             	sub    $0xc,%esp
82000a45:	ff 75 08             	pushl  0x8(%ebp)
82000a48:	e8 30 05 00 00       	call   82000f7d <__malloc_unlock>
82000a4d:	83 c4 10             	add    $0x10,%esp
82000a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000a53:	83 c0 08             	add    $0x8,%eax
82000a56:	e9 17 05 00 00       	jmp    82000f72 <_malloc_r+0x81d>
82000a5b:	b8 08 1c 00 82       	mov    $0x82001c08,%eax
82000a60:	ba 08 1c 00 82       	mov    $0x82001c08,%edx
82000a65:	89 50 0c             	mov    %edx,0xc(%eax)
82000a68:	ba 08 1c 00 82       	mov    $0x82001c08,%edx
82000a6d:	8b 40 0c             	mov    0xc(%eax),%eax
82000a70:	89 42 08             	mov    %eax,0x8(%edx)
82000a73:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
82000a77:	78 32                	js     82000aab <_malloc_r+0x356>
82000a79:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000a7c:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000a7f:	01 d0                	add    %edx,%eax
82000a81:	8b 50 04             	mov    0x4(%eax),%edx
82000a84:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000a87:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000a8a:	01 c8                	add    %ecx,%eax
82000a8c:	83 ca 01             	or     $0x1,%edx
82000a8f:	89 50 04             	mov    %edx,0x4(%eax)
82000a92:	83 ec 0c             	sub    $0xc,%esp
82000a95:	ff 75 08             	pushl  0x8(%ebp)
82000a98:	e8 e0 04 00 00       	call   82000f7d <__malloc_unlock>
82000a9d:	83 c4 10             	add    $0x10,%esp
82000aa0:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000aa3:	83 c0 08             	add    $0x8,%eax
82000aa6:	e9 c7 04 00 00       	jmp    82000f72 <_malloc_r+0x81d>
82000aab:	81 7d cc ff 01 00 00 	cmpl   $0x1ff,-0x34(%ebp)
82000ab2:	77 7f                	ja     82000b33 <_malloc_r+0x3de>
82000ab4:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000ab7:	c1 e8 03             	shr    $0x3,%eax
82000aba:	89 45 c8             	mov    %eax,-0x38(%ebp)
82000abd:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000ac2:	8b 58 04             	mov    0x4(%eax),%ebx
82000ac5:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000ac8:	8d 50 03             	lea    0x3(%eax),%edx
82000acb:	85 c0                	test   %eax,%eax
82000acd:	0f 48 c2             	cmovs  %edx,%eax
82000ad0:	c1 f8 02             	sar    $0x2,%eax
82000ad3:	ba 01 00 00 00       	mov    $0x1,%edx
82000ad8:	89 c1                	mov    %eax,%ecx
82000ada:	d3 e2                	shl    %cl,%edx
82000adc:	89 d0                	mov    %edx,%eax
82000ade:	ba 00 1c 00 82       	mov    $0x82001c00,%edx
82000ae3:	09 d8                	or     %ebx,%eax
82000ae5:	89 42 04             	mov    %eax,0x4(%edx)
82000ae8:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000aeb:	83 c0 01             	add    $0x1,%eax
82000aee:	01 c0                	add    %eax,%eax
82000af0:	c1 e0 02             	shl    $0x2,%eax
82000af3:	05 00 1c 00 82       	add    $0x82001c00,%eax
82000af8:	83 e8 08             	sub    $0x8,%eax
82000afb:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000afe:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b01:	8b 40 08             	mov    0x8(%eax),%eax
82000b04:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000b07:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000b0a:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000b0d:	89 50 0c             	mov    %edx,0xc(%eax)
82000b10:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000b13:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000b16:	89 50 08             	mov    %edx,0x8(%eax)
82000b19:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b1c:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000b1f:	89 50 08             	mov    %edx,0x8(%eax)
82000b22:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b25:	8b 50 08             	mov    0x8(%eax),%edx
82000b28:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000b2b:	89 50 0c             	mov    %edx,0xc(%eax)
82000b2e:	e9 2f 01 00 00       	jmp    82000c62 <_malloc_r+0x50d>
82000b33:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b36:	c1 e8 09             	shr    $0x9,%eax
82000b39:	85 c0                	test   %eax,%eax
82000b3b:	75 08                	jne    82000b45 <_malloc_r+0x3f0>
82000b3d:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b40:	c1 e8 03             	shr    $0x3,%eax
82000b43:	eb 77                	jmp    82000bbc <_malloc_r+0x467>
82000b45:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b48:	c1 e8 09             	shr    $0x9,%eax
82000b4b:	83 f8 04             	cmp    $0x4,%eax
82000b4e:	77 0b                	ja     82000b5b <_malloc_r+0x406>
82000b50:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b53:	c1 e8 06             	shr    $0x6,%eax
82000b56:	83 c0 38             	add    $0x38,%eax
82000b59:	eb 61                	jmp    82000bbc <_malloc_r+0x467>
82000b5b:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b5e:	c1 e8 09             	shr    $0x9,%eax
82000b61:	83 f8 14             	cmp    $0x14,%eax
82000b64:	77 0b                	ja     82000b71 <_malloc_r+0x41c>
82000b66:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b69:	c1 e8 09             	shr    $0x9,%eax
82000b6c:	83 c0 5b             	add    $0x5b,%eax
82000b6f:	eb 4b                	jmp    82000bbc <_malloc_r+0x467>
82000b71:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b74:	c1 e8 09             	shr    $0x9,%eax
82000b77:	83 f8 54             	cmp    $0x54,%eax
82000b7a:	77 0b                	ja     82000b87 <_malloc_r+0x432>
82000b7c:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b7f:	c1 e8 0c             	shr    $0xc,%eax
82000b82:	83 c0 6e             	add    $0x6e,%eax
82000b85:	eb 35                	jmp    82000bbc <_malloc_r+0x467>
82000b87:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b8a:	c1 e8 09             	shr    $0x9,%eax
82000b8d:	3d 54 01 00 00       	cmp    $0x154,%eax
82000b92:	77 0b                	ja     82000b9f <_malloc_r+0x44a>
82000b94:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b97:	c1 e8 0f             	shr    $0xf,%eax
82000b9a:	83 c0 77             	add    $0x77,%eax
82000b9d:	eb 1d                	jmp    82000bbc <_malloc_r+0x467>
82000b9f:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000ba2:	c1 e8 09             	shr    $0x9,%eax
82000ba5:	3d 54 05 00 00       	cmp    $0x554,%eax
82000baa:	77 0b                	ja     82000bb7 <_malloc_r+0x462>
82000bac:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000baf:	c1 e8 12             	shr    $0x12,%eax
82000bb2:	83 c0 7c             	add    $0x7c,%eax
82000bb5:	eb 05                	jmp    82000bbc <_malloc_r+0x467>
82000bb7:	b8 7e 00 00 00       	mov    $0x7e,%eax
82000bbc:	89 45 c8             	mov    %eax,-0x38(%ebp)
82000bbf:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000bc2:	83 c0 01             	add    $0x1,%eax
82000bc5:	01 c0                	add    %eax,%eax
82000bc7:	c1 e0 02             	shl    $0x2,%eax
82000bca:	05 00 1c 00 82       	add    $0x82001c00,%eax
82000bcf:	83 e8 08             	sub    $0x8,%eax
82000bd2:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000bd5:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000bd8:	8b 40 08             	mov    0x8(%eax),%eax
82000bdb:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000bde:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000be1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000be4:	75 36                	jne    82000c1c <_malloc_r+0x4c7>
82000be6:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000beb:	8b 58 04             	mov    0x4(%eax),%ebx
82000bee:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000bf1:	8d 50 03             	lea    0x3(%eax),%edx
82000bf4:	85 c0                	test   %eax,%eax
82000bf6:	0f 48 c2             	cmovs  %edx,%eax
82000bf9:	c1 f8 02             	sar    $0x2,%eax
82000bfc:	ba 01 00 00 00       	mov    $0x1,%edx
82000c01:	89 c1                	mov    %eax,%ecx
82000c03:	d3 e2                	shl    %cl,%edx
82000c05:	89 d0                	mov    %edx,%eax
82000c07:	ba 00 1c 00 82       	mov    $0x82001c00,%edx
82000c0c:	09 d8                	or     %ebx,%eax
82000c0e:	89 42 04             	mov    %eax,0x4(%edx)
82000c11:	eb 28                	jmp    82000c3b <_malloc_r+0x4e6>
82000c13:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c16:	8b 40 08             	mov    0x8(%eax),%eax
82000c19:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000c1c:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c1f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000c22:	74 0e                	je     82000c32 <_malloc_r+0x4dd>
82000c24:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c27:	8b 40 04             	mov    0x4(%eax),%eax
82000c2a:	83 e0 fc             	and    $0xfffffffc,%eax
82000c2d:	39 45 cc             	cmp    %eax,-0x34(%ebp)
82000c30:	72 e1                	jb     82000c13 <_malloc_r+0x4be>
82000c32:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c35:	8b 40 0c             	mov    0xc(%eax),%eax
82000c38:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000c3e:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000c41:	89 50 0c             	mov    %edx,0xc(%eax)
82000c44:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000c47:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000c4a:	89 50 08             	mov    %edx,0x8(%eax)
82000c4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000c50:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000c53:	89 50 08             	mov    %edx,0x8(%eax)
82000c56:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000c59:	8b 50 08             	mov    0x8(%eax),%edx
82000c5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c5f:	89 50 0c             	mov    %edx,0xc(%eax)
82000c62:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000c65:	8d 50 03             	lea    0x3(%eax),%edx
82000c68:	85 c0                	test   %eax,%eax
82000c6a:	0f 48 c2             	cmovs  %edx,%eax
82000c6d:	c1 f8 02             	sar    $0x2,%eax
82000c70:	ba 01 00 00 00       	mov    $0x1,%edx
82000c75:	89 c1                	mov    %eax,%ecx
82000c77:	d3 e2                	shl    %cl,%edx
82000c79:	89 d0                	mov    %edx,%eax
82000c7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82000c7e:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000c83:	8b 40 04             	mov    0x4(%eax),%eax
82000c86:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
82000c89:	0f 87 13 02 00 00    	ja     82000ea2 <_malloc_r+0x74d>
82000c8f:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000c94:	8b 40 04             	mov    0x4(%eax),%eax
82000c97:	23 45 e4             	and    -0x1c(%ebp),%eax
82000c9a:	85 c0                	test   %eax,%eax
82000c9c:	75 27                	jne    82000cc5 <_malloc_r+0x570>
82000c9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000ca1:	83 e0 fc             	and    $0xfffffffc,%eax
82000ca4:	83 c0 04             	add    $0x4,%eax
82000ca7:	89 45 f0             	mov    %eax,-0x10(%ebp)
82000caa:	d1 65 e4             	shll   -0x1c(%ebp)
82000cad:	eb 07                	jmp    82000cb6 <_malloc_r+0x561>
82000caf:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
82000cb3:	d1 65 e4             	shll   -0x1c(%ebp)
82000cb6:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000cbb:	8b 40 04             	mov    0x4(%eax),%eax
82000cbe:	23 45 e4             	and    -0x1c(%ebp),%eax
82000cc1:	85 c0                	test   %eax,%eax
82000cc3:	74 ea                	je     82000caf <_malloc_r+0x55a>
82000cc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000cc8:	89 45 e0             	mov    %eax,-0x20(%ebp)
82000ccb:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000cce:	83 c0 01             	add    $0x1,%eax
82000cd1:	01 c0                	add    %eax,%eax
82000cd3:	c1 e0 02             	shl    $0x2,%eax
82000cd6:	05 00 1c 00 82       	add    $0x82001c00,%eax
82000cdb:	83 e8 08             	sub    $0x8,%eax
82000cde:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000ce1:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000ce4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
82000ce7:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000cea:	8b 40 0c             	mov    0xc(%eax),%eax
82000ced:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000cf0:	e9 22 01 00 00       	jmp    82000e17 <_malloc_r+0x6c2>
82000cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000cf8:	8b 40 04             	mov    0x4(%eax),%eax
82000cfb:	83 e0 fc             	and    $0xfffffffc,%eax
82000cfe:	89 45 cc             	mov    %eax,-0x34(%ebp)
82000d01:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000d04:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000d07:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000d0a:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000d0e:	0f 8e 9e 00 00 00    	jle    82000db2 <_malloc_r+0x65d>
82000d14:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000d17:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000d1a:	01 d0                	add    %edx,%eax
82000d1c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
82000d1f:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000d22:	83 c8 01             	or     $0x1,%eax
82000d25:	89 c2                	mov    %eax,%edx
82000d27:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d2a:	89 50 04             	mov    %edx,0x4(%eax)
82000d2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d30:	8b 40 0c             	mov    0xc(%eax),%eax
82000d33:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000d36:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d39:	8b 40 08             	mov    0x8(%eax),%eax
82000d3c:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000d3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000d42:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000d45:	89 50 0c             	mov    %edx,0xc(%eax)
82000d48:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000d4b:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000d4e:	89 50 08             	mov    %edx,0x8(%eax)
82000d51:	b8 08 1c 00 82       	mov    $0x82001c08,%eax
82000d56:	8b 55 c4             	mov    -0x3c(%ebp),%edx
82000d59:	89 50 0c             	mov    %edx,0xc(%eax)
82000d5c:	ba 08 1c 00 82       	mov    $0x82001c08,%edx
82000d61:	8b 40 0c             	mov    0xc(%eax),%eax
82000d64:	89 42 08             	mov    %eax,0x8(%edx)
82000d67:	ba 08 1c 00 82       	mov    $0x82001c08,%edx
82000d6c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d6f:	89 50 0c             	mov    %edx,0xc(%eax)
82000d72:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d75:	8b 50 0c             	mov    0xc(%eax),%edx
82000d78:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d7b:	89 50 08             	mov    %edx,0x8(%eax)
82000d7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000d81:	83 c8 01             	or     $0x1,%eax
82000d84:	89 c2                	mov    %eax,%edx
82000d86:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d89:	89 50 04             	mov    %edx,0x4(%eax)
82000d8c:	8b 55 e8             	mov    -0x18(%ebp),%edx
82000d8f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d92:	01 c2                	add    %eax,%edx
82000d94:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000d97:	89 02                	mov    %eax,(%edx)
82000d99:	83 ec 0c             	sub    $0xc,%esp
82000d9c:	ff 75 08             	pushl  0x8(%ebp)
82000d9f:	e8 d9 01 00 00       	call   82000f7d <__malloc_unlock>
82000da4:	83 c4 10             	add    $0x10,%esp
82000da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000daa:	83 c0 08             	add    $0x8,%eax
82000dad:	e9 c0 01 00 00       	jmp    82000f72 <_malloc_r+0x81d>
82000db2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
82000db6:	78 56                	js     82000e0e <_malloc_r+0x6b9>
82000db8:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000dbb:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000dbe:	01 d0                	add    %edx,%eax
82000dc0:	8b 50 04             	mov    0x4(%eax),%edx
82000dc3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000dc6:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000dc9:	01 c8                	add    %ecx,%eax
82000dcb:	83 ca 01             	or     $0x1,%edx
82000dce:	89 50 04             	mov    %edx,0x4(%eax)
82000dd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000dd4:	8b 40 0c             	mov    0xc(%eax),%eax
82000dd7:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000ddd:	8b 40 08             	mov    0x8(%eax),%eax
82000de0:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000de3:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000de6:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000de9:	89 50 0c             	mov    %edx,0xc(%eax)
82000dec:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000def:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000df2:	89 50 08             	mov    %edx,0x8(%eax)
82000df5:	83 ec 0c             	sub    $0xc,%esp
82000df8:	ff 75 08             	pushl  0x8(%ebp)
82000dfb:	e8 7d 01 00 00       	call   82000f7d <__malloc_unlock>
82000e00:	83 c4 10             	add    $0x10,%esp
82000e03:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e06:	83 c0 08             	add    $0x8,%eax
82000e09:	e9 64 01 00 00       	jmp    82000f72 <_malloc_r+0x81d>
82000e0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e11:	8b 40 0c             	mov    0xc(%eax),%eax
82000e14:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000e17:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e1a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
82000e1d:	0f 85 d2 fe ff ff    	jne    82000cf5 <_malloc_r+0x5a0>
82000e23:	83 45 ec 08          	addl   $0x8,-0x14(%ebp)
82000e27:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
82000e2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000e2e:	83 e0 03             	and    $0x3,%eax
82000e31:	85 c0                	test   %eax,%eax
82000e33:	0f 85 ae fe ff ff    	jne    82000ce7 <_malloc_r+0x592>
82000e39:	8b 45 e0             	mov    -0x20(%ebp),%eax
82000e3c:	83 e0 03             	and    $0x3,%eax
82000e3f:	85 c0                	test   %eax,%eax
82000e41:	75 19                	jne    82000e5c <_malloc_r+0x707>
82000e43:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000e48:	8b 48 04             	mov    0x4(%eax),%ecx
82000e4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
82000e4e:	f7 d0                	not    %eax
82000e50:	ba 00 1c 00 82       	mov    $0x82001c00,%edx
82000e55:	21 c8                	and    %ecx,%eax
82000e57:	89 42 04             	mov    %eax,0x4(%edx)
82000e5a:	eb 13                	jmp    82000e6f <_malloc_r+0x71a>
82000e5c:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
82000e60:	83 6d d4 08          	subl   $0x8,-0x2c(%ebp)
82000e64:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000e67:	8b 40 08             	mov    0x8(%eax),%eax
82000e6a:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
82000e6d:	74 ca                	je     82000e39 <_malloc_r+0x6e4>
82000e6f:	d1 65 e4             	shll   -0x1c(%ebp)
82000e72:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000e77:	8b 40 04             	mov    0x4(%eax),%eax
82000e7a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
82000e7d:	77 23                	ja     82000ea2 <_malloc_r+0x74d>
82000e7f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
82000e83:	74 1d                	je     82000ea2 <_malloc_r+0x74d>
82000e85:	eb 07                	jmp    82000e8e <_malloc_r+0x739>
82000e87:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
82000e8b:	d1 65 e4             	shll   -0x1c(%ebp)
82000e8e:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000e93:	8b 40 04             	mov    0x4(%eax),%eax
82000e96:	23 45 e4             	and    -0x1c(%ebp),%eax
82000e99:	85 c0                	test   %eax,%eax
82000e9b:	74 ea                	je     82000e87 <_malloc_r+0x732>
82000e9d:	e9 23 fe ff ff       	jmp    82000cc5 <_malloc_r+0x570>
82000ea2:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000ea7:	8b 40 08             	mov    0x8(%eax),%eax
82000eaa:	8b 40 04             	mov    0x4(%eax),%eax
82000ead:	83 e0 fc             	and    $0xfffffffc,%eax
82000eb0:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000eb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000eb6:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000ebb:	8b 40 08             	mov    0x8(%eax),%eax
82000ebe:	8b 40 04             	mov    0x4(%eax),%eax
82000ec1:	83 e0 fc             	and    $0xfffffffc,%eax
82000ec4:	39 45 d0             	cmp    %eax,-0x30(%ebp)
82000ec7:	77 06                	ja     82000ecf <_malloc_r+0x77a>
82000ec9:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000ecd:	7f 53                	jg     82000f22 <_malloc_r+0x7cd>
82000ecf:	83 ec 08             	sub    $0x8,%esp
82000ed2:	ff 75 d0             	pushl  -0x30(%ebp)
82000ed5:	ff 75 08             	pushl  0x8(%ebp)
82000ed8:	e8 e5 f5 ff ff       	call   820004c2 <malloc_extend_top>
82000edd:	83 c4 10             	add    $0x10,%esp
82000ee0:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000ee5:	8b 40 08             	mov    0x8(%eax),%eax
82000ee8:	8b 40 04             	mov    0x4(%eax),%eax
82000eeb:	83 e0 fc             	and    $0xfffffffc,%eax
82000eee:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000ef1:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000ef4:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000ef9:	8b 40 08             	mov    0x8(%eax),%eax
82000efc:	8b 40 04             	mov    0x4(%eax),%eax
82000eff:	83 e0 fc             	and    $0xfffffffc,%eax
82000f02:	39 45 d0             	cmp    %eax,-0x30(%ebp)
82000f05:	77 06                	ja     82000f0d <_malloc_r+0x7b8>
82000f07:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000f0b:	7f 15                	jg     82000f22 <_malloc_r+0x7cd>
82000f0d:	83 ec 0c             	sub    $0xc,%esp
82000f10:	ff 75 08             	pushl  0x8(%ebp)
82000f13:	e8 65 00 00 00       	call   82000f7d <__malloc_unlock>
82000f18:	83 c4 10             	add    $0x10,%esp
82000f1b:	b8 00 00 00 00       	mov    $0x0,%eax
82000f20:	eb 50                	jmp    82000f72 <_malloc_r+0x81d>
82000f22:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000f27:	8b 40 08             	mov    0x8(%eax),%eax
82000f2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000f2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000f30:	83 c8 01             	or     $0x1,%eax
82000f33:	89 c2                	mov    %eax,%edx
82000f35:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000f38:	89 50 04             	mov    %edx,0x4(%eax)
82000f3b:	ba 00 1c 00 82       	mov    $0x82001c00,%edx
82000f40:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000f43:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000f46:	01 c8                	add    %ecx,%eax
82000f48:	89 42 08             	mov    %eax,0x8(%edx)
82000f4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000f4e:	83 c8 01             	or     $0x1,%eax
82000f51:	89 c2                	mov    %eax,%edx
82000f53:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82000f58:	8b 40 08             	mov    0x8(%eax),%eax
82000f5b:	89 50 04             	mov    %edx,0x4(%eax)
82000f5e:	83 ec 0c             	sub    $0xc,%esp
82000f61:	ff 75 08             	pushl  0x8(%ebp)
82000f64:	e8 14 00 00 00       	call   82000f7d <__malloc_unlock>
82000f69:	83 c4 10             	add    $0x10,%esp
82000f6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000f6f:	83 c0 08             	add    $0x8,%eax
82000f72:	8b 5d fc             	mov    -0x4(%ebp),%ebx
82000f75:	c9                   	leave  
82000f76:	c3                   	ret    

82000f77 <__malloc_lock>:
82000f77:	55                   	push   %ebp
82000f78:	89 e5                	mov    %esp,%ebp
82000f7a:	90                   	nop
82000f7b:	5d                   	pop    %ebp
82000f7c:	c3                   	ret    

82000f7d <__malloc_unlock>:
82000f7d:	55                   	push   %ebp
82000f7e:	89 e5                	mov    %esp,%ebp
82000f80:	90                   	nop
82000f81:	5d                   	pop    %ebp
82000f82:	c3                   	ret    

82000f83 <_sbrk_r>:
82000f83:	55                   	push   %ebp
82000f84:	89 e5                	mov    %esp,%ebp
82000f86:	83 ec 18             	sub    $0x18,%esp
82000f89:	c7 05 70 20 00 82 00 	movl   $0x0,0x82002070
82000f90:	00 00 00 
82000f93:	83 ec 0c             	sub    $0xc,%esp
82000f96:	ff 75 0c             	pushl  0xc(%ebp)
82000f99:	e8 28 f3 ff ff       	call   820002c6 <sbrk>
82000f9e:	83 c4 10             	add    $0x10,%esp
82000fa1:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000fa4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
82000fa8:	75 14                	jne    82000fbe <_sbrk_r+0x3b>
82000faa:	a1 70 20 00 82       	mov    0x82002070,%eax
82000faf:	85 c0                	test   %eax,%eax
82000fb1:	74 0b                	je     82000fbe <_sbrk_r+0x3b>
82000fb3:	8b 15 70 20 00 82    	mov    0x82002070,%edx
82000fb9:	8b 45 08             	mov    0x8(%ebp),%eax
82000fbc:	89 10                	mov    %edx,(%eax)
82000fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000fc1:	c9                   	leave  
82000fc2:	c3                   	ret    

82000fc3 <__call_exitprocs>:
82000fc3:	55                   	push   %ebp
82000fc4:	89 e5                	mov    %esp,%ebp
82000fc6:	57                   	push   %edi
82000fc7:	56                   	push   %esi
82000fc8:	53                   	push   %ebx
82000fc9:	83 ec 1c             	sub    $0x1c,%esp
82000fcc:	a1 ac 17 00 82       	mov    0x820017ac,%eax
82000fd1:	8b 98 48 01 00 00    	mov    0x148(%eax),%ebx
82000fd7:	a1 ac 17 00 82       	mov    0x820017ac,%eax
82000fdc:	05 48 01 00 00       	add    $0x148,%eax
82000fe1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82000fe4:	90                   	nop
82000fe5:	85 db                	test   %ebx,%ebx
82000fe7:	0f 84 e1 00 00 00    	je     820010ce <__call_exitprocs+0x10b>
82000fed:	8d bb 88 00 00 00    	lea    0x88(%ebx),%edi
82000ff3:	8b 43 04             	mov    0x4(%ebx),%eax
82000ff6:	8d 70 ff             	lea    -0x1(%eax),%esi
82000ff9:	e9 c6 00 00 00       	jmp    820010c4 <__call_exitprocs+0x101>
82000ffe:	b8 01 00 00 00       	mov    $0x1,%eax
82001003:	89 f1                	mov    %esi,%ecx
82001005:	d3 e0                	shl    %cl,%eax
82001007:	89 45 e0             	mov    %eax,-0x20(%ebp)
8200100a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
8200100e:	74 17                	je     82001027 <__call_exitprocs+0x64>
82001010:	85 ff                	test   %edi,%edi
82001012:	0f 84 a5 00 00 00    	je     820010bd <__call_exitprocs+0xfa>
82001018:	8d 46 20             	lea    0x20(%esi),%eax
8200101b:	8b 04 87             	mov    (%edi,%eax,4),%eax
8200101e:	39 45 0c             	cmp    %eax,0xc(%ebp)
82001021:	0f 85 96 00 00 00    	jne    820010bd <__call_exitprocs+0xfa>
82001027:	8b 44 b3 08          	mov    0x8(%ebx,%esi,4),%eax
8200102b:	89 45 dc             	mov    %eax,-0x24(%ebp)
8200102e:	8b 43 04             	mov    0x4(%ebx),%eax
82001031:	83 e8 01             	sub    $0x1,%eax
82001034:	39 c6                	cmp    %eax,%esi
82001036:	75 0b                	jne    82001043 <__call_exitprocs+0x80>
82001038:	8b 43 04             	mov    0x4(%ebx),%eax
8200103b:	83 e8 01             	sub    $0x1,%eax
8200103e:	89 43 04             	mov    %eax,0x4(%ebx)
82001041:	eb 08                	jmp    8200104b <__call_exitprocs+0x88>
82001043:	c7 44 b3 08 00 00 00 	movl   $0x0,0x8(%ebx,%esi,4)
8200104a:	00 
8200104b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
8200104f:	74 6f                	je     820010c0 <__call_exitprocs+0xfd>
82001051:	8b 43 04             	mov    0x4(%ebx),%eax
82001054:	89 45 d8             	mov    %eax,-0x28(%ebp)
82001057:	85 ff                	test   %edi,%edi
82001059:	74 0f                	je     8200106a <__call_exitprocs+0xa7>
8200105b:	8b 97 00 01 00 00    	mov    0x100(%edi),%edx
82001061:	8b 45 e0             	mov    -0x20(%ebp),%eax
82001064:	21 d0                	and    %edx,%eax
82001066:	85 c0                	test   %eax,%eax
82001068:	75 07                	jne    82001071 <__call_exitprocs+0xae>
8200106a:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200106d:	ff d0                	call   *%eax
8200106f:	eb 32                	jmp    820010a3 <__call_exitprocs+0xe0>
82001071:	8b 97 04 01 00 00    	mov    0x104(%edi),%edx
82001077:	8b 45 e0             	mov    -0x20(%ebp),%eax
8200107a:	21 d0                	and    %edx,%eax
8200107c:	85 c0                	test   %eax,%eax
8200107e:	75 14                	jne    82001094 <__call_exitprocs+0xd1>
82001080:	8b 04 b7             	mov    (%edi,%esi,4),%eax
82001083:	83 ec 08             	sub    $0x8,%esp
82001086:	50                   	push   %eax
82001087:	ff 75 08             	pushl  0x8(%ebp)
8200108a:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200108d:	ff d0                	call   *%eax
8200108f:	83 c4 10             	add    $0x10,%esp
82001092:	eb 0f                	jmp    820010a3 <__call_exitprocs+0xe0>
82001094:	8b 04 b7             	mov    (%edi,%esi,4),%eax
82001097:	83 ec 0c             	sub    $0xc,%esp
8200109a:	50                   	push   %eax
8200109b:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200109e:	ff d0                	call   *%eax
820010a0:	83 c4 10             	add    $0x10,%esp
820010a3:	8b 43 04             	mov    0x4(%ebx),%eax
820010a6:	39 45 d8             	cmp    %eax,-0x28(%ebp)
820010a9:	0f 85 1d ff ff ff    	jne    82000fcc <__call_exitprocs+0x9>
820010af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
820010b2:	8b 00                	mov    (%eax),%eax
820010b4:	39 c3                	cmp    %eax,%ebx
820010b6:	74 09                	je     820010c1 <__call_exitprocs+0xfe>
820010b8:	e9 0f ff ff ff       	jmp    82000fcc <__call_exitprocs+0x9>
820010bd:	90                   	nop
820010be:	eb 01                	jmp    820010c1 <__call_exitprocs+0xfe>
820010c0:	90                   	nop
820010c1:	83 ee 01             	sub    $0x1,%esi
820010c4:	85 f6                	test   %esi,%esi
820010c6:	0f 89 32 ff ff ff    	jns    82000ffe <__call_exitprocs+0x3b>
820010cc:	eb 01                	jmp    820010cf <__call_exitprocs+0x10c>
820010ce:	90                   	nop
820010cf:	90                   	nop
820010d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
820010d3:	5b                   	pop    %ebx
820010d4:	5e                   	pop    %esi
820010d5:	5f                   	pop    %edi
820010d6:	5d                   	pop    %ebp
820010d7:	c3                   	ret    

820010d8 <_free_r>:
820010d8:	55                   	push   %ebp
820010d9:	89 e5                	mov    %esp,%ebp
820010db:	53                   	push   %ebx
820010dc:	83 ec 34             	sub    $0x34,%esp
820010df:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
820010e3:	0f 84 c4 03 00 00    	je     820014ad <_free_r+0x3d5>
820010e9:	83 ec 0c             	sub    $0xc,%esp
820010ec:	ff 75 08             	pushl  0x8(%ebp)
820010ef:	e8 83 fe ff ff       	call   82000f77 <__malloc_lock>
820010f4:	83 c4 10             	add    $0x10,%esp
820010f7:	8b 45 0c             	mov    0xc(%ebp),%eax
820010fa:	83 e8 08             	sub    $0x8,%eax
820010fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
82001100:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001103:	8b 40 04             	mov    0x4(%eax),%eax
82001106:	89 45 e0             	mov    %eax,-0x20(%ebp)
82001109:	8b 45 e0             	mov    -0x20(%ebp),%eax
8200110c:	83 e0 fe             	and    $0xfffffffe,%eax
8200110f:	89 45 f0             	mov    %eax,-0x10(%ebp)
82001112:	8b 55 f4             	mov    -0xc(%ebp),%edx
82001115:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001118:	01 d0                	add    %edx,%eax
8200111a:	89 45 dc             	mov    %eax,-0x24(%ebp)
8200111d:	8b 45 dc             	mov    -0x24(%ebp),%eax
82001120:	8b 40 04             	mov    0x4(%eax),%eax
82001123:	83 e0 fc             	and    $0xfffffffc,%eax
82001126:	89 45 d8             	mov    %eax,-0x28(%ebp)
82001129:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
8200112e:	8b 40 08             	mov    0x8(%eax),%eax
82001131:	39 45 dc             	cmp    %eax,-0x24(%ebp)
82001134:	0f 85 94 00 00 00    	jne    820011ce <_free_r+0xf6>
8200113a:	8b 45 d8             	mov    -0x28(%ebp),%eax
8200113d:	01 45 f0             	add    %eax,-0x10(%ebp)
82001140:	8b 45 e0             	mov    -0x20(%ebp),%eax
82001143:	83 e0 01             	and    $0x1,%eax
82001146:	85 c0                	test   %eax,%eax
82001148:	75 3a                	jne    82001184 <_free_r+0xac>
8200114a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200114d:	8b 00                	mov    (%eax),%eax
8200114f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
82001152:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82001155:	f7 d8                	neg    %eax
82001157:	01 45 f4             	add    %eax,-0xc(%ebp)
8200115a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8200115d:	01 45 f0             	add    %eax,-0x10(%ebp)
82001160:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001163:	8b 40 0c             	mov    0xc(%eax),%eax
82001166:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001169:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200116c:	8b 40 08             	mov    0x8(%eax),%eax
8200116f:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001172:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001175:	8b 55 ec             	mov    -0x14(%ebp),%edx
82001178:	89 50 0c             	mov    %edx,0xc(%eax)
8200117b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200117e:	8b 55 e8             	mov    -0x18(%ebp),%edx
82001181:	89 50 08             	mov    %edx,0x8(%eax)
82001184:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001187:	83 c8 01             	or     $0x1,%eax
8200118a:	89 c2                	mov    %eax,%edx
8200118c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200118f:	89 50 04             	mov    %edx,0x4(%eax)
82001192:	ba 00 1c 00 82       	mov    $0x82001c00,%edx
82001197:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200119a:	89 42 08             	mov    %eax,0x8(%edx)
8200119d:	a1 08 20 00 82       	mov    0x82002008,%eax
820011a2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
820011a5:	72 14                	jb     820011bb <_free_r+0xe3>
820011a7:	a1 20 20 00 82       	mov    0x82002020,%eax
820011ac:	83 ec 08             	sub    $0x8,%esp
820011af:	50                   	push   %eax
820011b0:	ff 75 08             	pushl  0x8(%ebp)
820011b3:	e8 fb 02 00 00       	call   820014b3 <_malloc_trim_r>
820011b8:	83 c4 10             	add    $0x10,%esp
820011bb:	83 ec 0c             	sub    $0xc,%esp
820011be:	ff 75 08             	pushl  0x8(%ebp)
820011c1:	e8 b7 fd ff ff       	call   82000f7d <__malloc_unlock>
820011c6:	83 c4 10             	add    $0x10,%esp
820011c9:	e9 e0 02 00 00       	jmp    820014ae <_free_r+0x3d6>
820011ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
820011d1:	8b 55 d8             	mov    -0x28(%ebp),%edx
820011d4:	89 50 04             	mov    %edx,0x4(%eax)
820011d7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
820011de:	8b 45 e0             	mov    -0x20(%ebp),%eax
820011e1:	83 e0 01             	and    $0x1,%eax
820011e4:	85 c0                	test   %eax,%eax
820011e6:	75 52                	jne    8200123a <_free_r+0x162>
820011e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
820011eb:	8b 00                	mov    (%eax),%eax
820011ed:	89 45 d4             	mov    %eax,-0x2c(%ebp)
820011f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
820011f3:	f7 d8                	neg    %eax
820011f5:	01 45 f4             	add    %eax,-0xc(%ebp)
820011f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
820011fb:	01 45 f0             	add    %eax,-0x10(%ebp)
820011fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001201:	8b 40 08             	mov    0x8(%eax),%eax
82001204:	ba 08 1c 00 82       	mov    $0x82001c08,%edx
82001209:	39 d0                	cmp    %edx,%eax
8200120b:	75 09                	jne    82001216 <_free_r+0x13e>
8200120d:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
82001214:	eb 24                	jmp    8200123a <_free_r+0x162>
82001216:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001219:	8b 40 0c             	mov    0xc(%eax),%eax
8200121c:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200121f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001222:	8b 40 08             	mov    0x8(%eax),%eax
82001225:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001228:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200122b:	8b 55 ec             	mov    -0x14(%ebp),%edx
8200122e:	89 50 0c             	mov    %edx,0xc(%eax)
82001231:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001234:	8b 55 e8             	mov    -0x18(%ebp),%edx
82001237:	89 50 08             	mov    %edx,0x8(%eax)
8200123a:	8b 55 dc             	mov    -0x24(%ebp),%edx
8200123d:	8b 45 d8             	mov    -0x28(%ebp),%eax
82001240:	01 d0                	add    %edx,%eax
82001242:	8b 40 04             	mov    0x4(%eax),%eax
82001245:	83 e0 01             	and    $0x1,%eax
82001248:	85 c0                	test   %eax,%eax
8200124a:	75 75                	jne    820012c1 <_free_r+0x1e9>
8200124c:	8b 45 d8             	mov    -0x28(%ebp),%eax
8200124f:	01 45 f0             	add    %eax,-0x10(%ebp)
82001252:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
82001256:	75 45                	jne    8200129d <_free_r+0x1c5>
82001258:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200125b:	8b 40 08             	mov    0x8(%eax),%eax
8200125e:	ba 08 1c 00 82       	mov    $0x82001c08,%edx
82001263:	39 d0                	cmp    %edx,%eax
82001265:	75 36                	jne    8200129d <_free_r+0x1c5>
82001267:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
8200126e:	b8 08 1c 00 82       	mov    $0x82001c08,%eax
82001273:	8b 55 f4             	mov    -0xc(%ebp),%edx
82001276:	89 50 0c             	mov    %edx,0xc(%eax)
82001279:	ba 08 1c 00 82       	mov    $0x82001c08,%edx
8200127e:	8b 40 0c             	mov    0xc(%eax),%eax
82001281:	89 42 08             	mov    %eax,0x8(%edx)
82001284:	ba 08 1c 00 82       	mov    $0x82001c08,%edx
82001289:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200128c:	89 50 0c             	mov    %edx,0xc(%eax)
8200128f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001292:	8b 50 0c             	mov    0xc(%eax),%edx
82001295:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001298:	89 50 08             	mov    %edx,0x8(%eax)
8200129b:	eb 24                	jmp    820012c1 <_free_r+0x1e9>
8200129d:	8b 45 dc             	mov    -0x24(%ebp),%eax
820012a0:	8b 40 0c             	mov    0xc(%eax),%eax
820012a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
820012a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
820012a9:	8b 40 08             	mov    0x8(%eax),%eax
820012ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
820012af:	8b 45 e8             	mov    -0x18(%ebp),%eax
820012b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
820012b5:	89 50 0c             	mov    %edx,0xc(%eax)
820012b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
820012bb:	8b 55 e8             	mov    -0x18(%ebp),%edx
820012be:	89 50 08             	mov    %edx,0x8(%eax)
820012c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012c4:	83 c8 01             	or     $0x1,%eax
820012c7:	89 c2                	mov    %eax,%edx
820012c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012cc:	89 50 04             	mov    %edx,0x4(%eax)
820012cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
820012d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012d5:	01 c2                	add    %eax,%edx
820012d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012da:	89 02                	mov    %eax,(%edx)
820012dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
820012e0:	0f 85 b7 01 00 00    	jne    8200149d <_free_r+0x3c5>
820012e6:	81 7d f0 ff 01 00 00 	cmpl   $0x1ff,-0x10(%ebp)
820012ed:	77 7f                	ja     8200136e <_free_r+0x296>
820012ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012f2:	c1 e8 03             	shr    $0x3,%eax
820012f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
820012f8:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
820012fd:	8b 58 04             	mov    0x4(%eax),%ebx
82001300:	8b 45 d0             	mov    -0x30(%ebp),%eax
82001303:	8d 50 03             	lea    0x3(%eax),%edx
82001306:	85 c0                	test   %eax,%eax
82001308:	0f 48 c2             	cmovs  %edx,%eax
8200130b:	c1 f8 02             	sar    $0x2,%eax
8200130e:	ba 01 00 00 00       	mov    $0x1,%edx
82001313:	89 c1                	mov    %eax,%ecx
82001315:	d3 e2                	shl    %cl,%edx
82001317:	89 d0                	mov    %edx,%eax
82001319:	ba 00 1c 00 82       	mov    $0x82001c00,%edx
8200131e:	09 d8                	or     %ebx,%eax
82001320:	89 42 04             	mov    %eax,0x4(%edx)
82001323:	8b 45 d0             	mov    -0x30(%ebp),%eax
82001326:	83 c0 01             	add    $0x1,%eax
82001329:	01 c0                	add    %eax,%eax
8200132b:	c1 e0 02             	shl    $0x2,%eax
8200132e:	05 00 1c 00 82       	add    $0x82001c00,%eax
82001333:	83 e8 08             	sub    $0x8,%eax
82001336:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001339:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200133c:	8b 40 08             	mov    0x8(%eax),%eax
8200133f:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001342:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001345:	8b 55 ec             	mov    -0x14(%ebp),%edx
82001348:	89 50 0c             	mov    %edx,0xc(%eax)
8200134b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200134e:	8b 55 e8             	mov    -0x18(%ebp),%edx
82001351:	89 50 08             	mov    %edx,0x8(%eax)
82001354:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001357:	8b 55 f4             	mov    -0xc(%ebp),%edx
8200135a:	89 50 08             	mov    %edx,0x8(%eax)
8200135d:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001360:	8b 50 08             	mov    0x8(%eax),%edx
82001363:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001366:	89 50 0c             	mov    %edx,0xc(%eax)
82001369:	e9 2f 01 00 00       	jmp    8200149d <_free_r+0x3c5>
8200136e:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001371:	c1 e8 09             	shr    $0x9,%eax
82001374:	85 c0                	test   %eax,%eax
82001376:	75 08                	jne    82001380 <_free_r+0x2a8>
82001378:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200137b:	c1 e8 03             	shr    $0x3,%eax
8200137e:	eb 77                	jmp    820013f7 <_free_r+0x31f>
82001380:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001383:	c1 e8 09             	shr    $0x9,%eax
82001386:	83 f8 04             	cmp    $0x4,%eax
82001389:	77 0b                	ja     82001396 <_free_r+0x2be>
8200138b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200138e:	c1 e8 06             	shr    $0x6,%eax
82001391:	83 c0 38             	add    $0x38,%eax
82001394:	eb 61                	jmp    820013f7 <_free_r+0x31f>
82001396:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001399:	c1 e8 09             	shr    $0x9,%eax
8200139c:	83 f8 14             	cmp    $0x14,%eax
8200139f:	77 0b                	ja     820013ac <_free_r+0x2d4>
820013a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013a4:	c1 e8 09             	shr    $0x9,%eax
820013a7:	83 c0 5b             	add    $0x5b,%eax
820013aa:	eb 4b                	jmp    820013f7 <_free_r+0x31f>
820013ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013af:	c1 e8 09             	shr    $0x9,%eax
820013b2:	83 f8 54             	cmp    $0x54,%eax
820013b5:	77 0b                	ja     820013c2 <_free_r+0x2ea>
820013b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013ba:	c1 e8 0c             	shr    $0xc,%eax
820013bd:	83 c0 6e             	add    $0x6e,%eax
820013c0:	eb 35                	jmp    820013f7 <_free_r+0x31f>
820013c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013c5:	c1 e8 09             	shr    $0x9,%eax
820013c8:	3d 54 01 00 00       	cmp    $0x154,%eax
820013cd:	77 0b                	ja     820013da <_free_r+0x302>
820013cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013d2:	c1 e8 0f             	shr    $0xf,%eax
820013d5:	83 c0 77             	add    $0x77,%eax
820013d8:	eb 1d                	jmp    820013f7 <_free_r+0x31f>
820013da:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013dd:	c1 e8 09             	shr    $0x9,%eax
820013e0:	3d 54 05 00 00       	cmp    $0x554,%eax
820013e5:	77 0b                	ja     820013f2 <_free_r+0x31a>
820013e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013ea:	c1 e8 12             	shr    $0x12,%eax
820013ed:	83 c0 7c             	add    $0x7c,%eax
820013f0:	eb 05                	jmp    820013f7 <_free_r+0x31f>
820013f2:	b8 7e 00 00 00       	mov    $0x7e,%eax
820013f7:	89 45 d0             	mov    %eax,-0x30(%ebp)
820013fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
820013fd:	83 c0 01             	add    $0x1,%eax
82001400:	01 c0                	add    %eax,%eax
82001402:	c1 e0 02             	shl    $0x2,%eax
82001405:	05 00 1c 00 82       	add    $0x82001c00,%eax
8200140a:	83 e8 08             	sub    $0x8,%eax
8200140d:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001410:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001413:	8b 40 08             	mov    0x8(%eax),%eax
82001416:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001419:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200141c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
8200141f:	75 36                	jne    82001457 <_free_r+0x37f>
82001421:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82001426:	8b 58 04             	mov    0x4(%eax),%ebx
82001429:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200142c:	8d 50 03             	lea    0x3(%eax),%edx
8200142f:	85 c0                	test   %eax,%eax
82001431:	0f 48 c2             	cmovs  %edx,%eax
82001434:	c1 f8 02             	sar    $0x2,%eax
82001437:	ba 01 00 00 00       	mov    $0x1,%edx
8200143c:	89 c1                	mov    %eax,%ecx
8200143e:	d3 e2                	shl    %cl,%edx
82001440:	89 d0                	mov    %edx,%eax
82001442:	ba 00 1c 00 82       	mov    $0x82001c00,%edx
82001447:	09 d8                	or     %ebx,%eax
82001449:	89 42 04             	mov    %eax,0x4(%edx)
8200144c:	eb 28                	jmp    82001476 <_free_r+0x39e>
8200144e:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001451:	8b 40 08             	mov    0x8(%eax),%eax
82001454:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001457:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200145a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
8200145d:	74 0e                	je     8200146d <_free_r+0x395>
8200145f:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001462:	8b 40 04             	mov    0x4(%eax),%eax
82001465:	83 e0 fc             	and    $0xfffffffc,%eax
82001468:	39 45 f0             	cmp    %eax,-0x10(%ebp)
8200146b:	72 e1                	jb     8200144e <_free_r+0x376>
8200146d:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001470:	8b 40 0c             	mov    0xc(%eax),%eax
82001473:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001476:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001479:	8b 55 ec             	mov    -0x14(%ebp),%edx
8200147c:	89 50 0c             	mov    %edx,0xc(%eax)
8200147f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001482:	8b 55 e8             	mov    -0x18(%ebp),%edx
82001485:	89 50 08             	mov    %edx,0x8(%eax)
82001488:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200148b:	8b 55 f4             	mov    -0xc(%ebp),%edx
8200148e:	89 50 08             	mov    %edx,0x8(%eax)
82001491:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001494:	8b 50 08             	mov    0x8(%eax),%edx
82001497:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200149a:	89 50 0c             	mov    %edx,0xc(%eax)
8200149d:	83 ec 0c             	sub    $0xc,%esp
820014a0:	ff 75 08             	pushl  0x8(%ebp)
820014a3:	e8 d5 fa ff ff       	call   82000f7d <__malloc_unlock>
820014a8:	83 c4 10             	add    $0x10,%esp
820014ab:	eb 01                	jmp    820014ae <_free_r+0x3d6>
820014ad:	90                   	nop
820014ae:	8b 5d fc             	mov    -0x4(%ebp),%ebx
820014b1:	c9                   	leave  
820014b2:	c3                   	ret    

820014b3 <_malloc_trim_r>:
820014b3:	55                   	push   %ebp
820014b4:	89 e5                	mov    %esp,%ebp
820014b6:	83 ec 28             	sub    $0x28,%esp
820014b9:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
820014c0:	83 ec 0c             	sub    $0xc,%esp
820014c3:	ff 75 08             	pushl  0x8(%ebp)
820014c6:	e8 ac fa ff ff       	call   82000f77 <__malloc_lock>
820014cb:	83 c4 10             	add    $0x10,%esp
820014ce:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
820014d3:	8b 40 08             	mov    0x8(%eax),%eax
820014d6:	8b 40 04             	mov    0x4(%eax),%eax
820014d9:	83 e0 fc             	and    $0xfffffffc,%eax
820014dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
820014df:	8b 45 f0             	mov    -0x10(%ebp),%eax
820014e2:	2b 45 0c             	sub    0xc(%ebp),%eax
820014e5:	89 c2                	mov    %eax,%edx
820014e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
820014ea:	01 d0                	add    %edx,%eax
820014ec:	83 e8 11             	sub    $0x11,%eax
820014ef:	ba 00 00 00 00       	mov    $0x0,%edx
820014f4:	f7 75 f4             	divl   -0xc(%ebp)
820014f7:	83 e8 01             	sub    $0x1,%eax
820014fa:	0f af 45 f4          	imul   -0xc(%ebp),%eax
820014fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001501:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001504:	39 45 ec             	cmp    %eax,-0x14(%ebp)
82001507:	7d 18                	jge    82001521 <_malloc_trim_r+0x6e>
82001509:	83 ec 0c             	sub    $0xc,%esp
8200150c:	ff 75 08             	pushl  0x8(%ebp)
8200150f:	e8 69 fa ff ff       	call   82000f7d <__malloc_unlock>
82001514:	83 c4 10             	add    $0x10,%esp
82001517:	b8 00 00 00 00       	mov    $0x0,%eax
8200151c:	e9 f1 00 00 00       	jmp    82001612 <_malloc_trim_r+0x15f>
82001521:	83 ec 08             	sub    $0x8,%esp
82001524:	6a 00                	push   $0x0
82001526:	ff 75 08             	pushl  0x8(%ebp)
82001529:	e8 55 fa ff ff       	call   82000f83 <_sbrk_r>
8200152e:	83 c4 10             	add    $0x10,%esp
82001531:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001534:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82001539:	8b 50 08             	mov    0x8(%eax),%edx
8200153c:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200153f:	01 d0                	add    %edx,%eax
82001541:	39 45 e8             	cmp    %eax,-0x18(%ebp)
82001544:	74 18                	je     8200155e <_malloc_trim_r+0xab>
82001546:	83 ec 0c             	sub    $0xc,%esp
82001549:	ff 75 08             	pushl  0x8(%ebp)
8200154c:	e8 2c fa ff ff       	call   82000f7d <__malloc_unlock>
82001551:	83 c4 10             	add    $0x10,%esp
82001554:	b8 00 00 00 00       	mov    $0x0,%eax
82001559:	e9 b4 00 00 00       	jmp    82001612 <_malloc_trim_r+0x15f>
8200155e:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001561:	f7 d8                	neg    %eax
82001563:	83 ec 08             	sub    $0x8,%esp
82001566:	50                   	push   %eax
82001567:	ff 75 08             	pushl  0x8(%ebp)
8200156a:	e8 14 fa ff ff       	call   82000f83 <_sbrk_r>
8200156f:	83 c4 10             	add    $0x10,%esp
82001572:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82001575:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
82001579:	75 61                	jne    820015dc <_malloc_trim_r+0x129>
8200157b:	83 ec 08             	sub    $0x8,%esp
8200157e:	6a 00                	push   $0x0
82001580:	ff 75 08             	pushl  0x8(%ebp)
82001583:	e8 fb f9 ff ff       	call   82000f83 <_sbrk_r>
82001588:	83 c4 10             	add    $0x10,%esp
8200158b:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200158e:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
82001593:	8b 50 08             	mov    0x8(%eax),%edx
82001596:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001599:	29 d0                	sub    %edx,%eax
8200159b:	89 45 f0             	mov    %eax,-0x10(%ebp)
8200159e:	83 7d f0 0f          	cmpl   $0xf,-0x10(%ebp)
820015a2:	7e 23                	jle    820015c7 <_malloc_trim_r+0x114>
820015a4:	8b 15 0c 20 00 82    	mov    0x8200200c,%edx
820015aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
820015ad:	29 d0                	sub    %edx,%eax
820015af:	a3 40 20 00 82       	mov    %eax,0x82002040
820015b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
820015b7:	83 c8 01             	or     $0x1,%eax
820015ba:	89 c2                	mov    %eax,%edx
820015bc:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
820015c1:	8b 40 08             	mov    0x8(%eax),%eax
820015c4:	89 50 04             	mov    %edx,0x4(%eax)
820015c7:	83 ec 0c             	sub    $0xc,%esp
820015ca:	ff 75 08             	pushl  0x8(%ebp)
820015cd:	e8 ab f9 ff ff       	call   82000f7d <__malloc_unlock>
820015d2:	83 c4 10             	add    $0x10,%esp
820015d5:	b8 00 00 00 00       	mov    $0x0,%eax
820015da:	eb 36                	jmp    82001612 <_malloc_trim_r+0x15f>
820015dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
820015df:	2b 45 ec             	sub    -0x14(%ebp),%eax
820015e2:	83 c8 01             	or     $0x1,%eax
820015e5:	89 c2                	mov    %eax,%edx
820015e7:	b8 00 1c 00 82       	mov    $0x82001c00,%eax
820015ec:	8b 40 08             	mov    0x8(%eax),%eax
820015ef:	89 50 04             	mov    %edx,0x4(%eax)
820015f2:	a1 40 20 00 82       	mov    0x82002040,%eax
820015f7:	2b 45 ec             	sub    -0x14(%ebp),%eax
820015fa:	a3 40 20 00 82       	mov    %eax,0x82002040
820015ff:	83 ec 0c             	sub    $0xc,%esp
82001602:	ff 75 08             	pushl  0x8(%ebp)
82001605:	e8 73 f9 ff ff       	call   82000f7d <__malloc_unlock>
8200160a:	83 c4 10             	add    $0x10,%esp
8200160d:	b8 01 00 00 00       	mov    $0x1,%eax
82001612:	c9                   	leave  
82001613:	c3                   	ret    

82001614 <cleanup_glue>:
82001614:	55                   	push   %ebp
82001615:	89 e5                	mov    %esp,%ebp
82001617:	83 ec 08             	sub    $0x8,%esp
8200161a:	8b 45 0c             	mov    0xc(%ebp),%eax
8200161d:	8b 00                	mov    (%eax),%eax
8200161f:	85 c0                	test   %eax,%eax
82001621:	74 14                	je     82001637 <cleanup_glue+0x23>
82001623:	8b 45 0c             	mov    0xc(%ebp),%eax
82001626:	8b 00                	mov    (%eax),%eax
82001628:	83 ec 08             	sub    $0x8,%esp
8200162b:	50                   	push   %eax
8200162c:	ff 75 08             	pushl  0x8(%ebp)
8200162f:	e8 e0 ff ff ff       	call   82001614 <cleanup_glue>
82001634:	83 c4 10             	add    $0x10,%esp
82001637:	83 ec 08             	sub    $0x8,%esp
8200163a:	ff 75 0c             	pushl  0xc(%ebp)
8200163d:	ff 75 08             	pushl  0x8(%ebp)
82001640:	e8 93 fa ff ff       	call   820010d8 <_free_r>
82001645:	83 c4 10             	add    $0x10,%esp
82001648:	90                   	nop
82001649:	c9                   	leave  
8200164a:	c3                   	ret    

8200164b <_reclaim_reent>:
8200164b:	55                   	push   %ebp
8200164c:	89 e5                	mov    %esp,%ebp
8200164e:	83 ec 28             	sub    $0x28,%esp
82001651:	a1 e4 1b 00 82       	mov    0x82001be4,%eax
82001656:	39 45 08             	cmp    %eax,0x8(%ebp)
82001659:	0f 84 49 01 00 00    	je     820017a8 <_reclaim_reent+0x15d>
8200165f:	8b 45 08             	mov    0x8(%ebp),%eax
82001662:	8b 40 4c             	mov    0x4c(%eax),%eax
82001665:	85 c0                	test   %eax,%eax
82001667:	74 64                	je     820016cd <_reclaim_reent+0x82>
82001669:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
82001670:	eb 3e                	jmp    820016b0 <_reclaim_reent+0x65>
82001672:	8b 45 08             	mov    0x8(%ebp),%eax
82001675:	8b 50 4c             	mov    0x4c(%eax),%edx
82001678:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200167b:	c1 e0 02             	shl    $0x2,%eax
8200167e:	01 d0                	add    %edx,%eax
82001680:	8b 00                	mov    (%eax),%eax
82001682:	89 45 f0             	mov    %eax,-0x10(%ebp)
82001685:	eb 1f                	jmp    820016a6 <_reclaim_reent+0x5b>
82001687:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200168a:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200168d:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001690:	8b 00                	mov    (%eax),%eax
82001692:	89 45 f0             	mov    %eax,-0x10(%ebp)
82001695:	83 ec 08             	sub    $0x8,%esp
82001698:	ff 75 e8             	pushl  -0x18(%ebp)
8200169b:	ff 75 08             	pushl  0x8(%ebp)
8200169e:	e8 35 fa ff ff       	call   820010d8 <_free_r>
820016a3:	83 c4 10             	add    $0x10,%esp
820016a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
820016aa:	75 db                	jne    82001687 <_reclaim_reent+0x3c>
820016ac:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
820016b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
820016b3:	83 f8 1f             	cmp    $0x1f,%eax
820016b6:	76 ba                	jbe    82001672 <_reclaim_reent+0x27>
820016b8:	8b 45 08             	mov    0x8(%ebp),%eax
820016bb:	8b 40 4c             	mov    0x4c(%eax),%eax
820016be:	83 ec 08             	sub    $0x8,%esp
820016c1:	50                   	push   %eax
820016c2:	ff 75 08             	pushl  0x8(%ebp)
820016c5:	e8 0e fa ff ff       	call   820010d8 <_free_r>
820016ca:	83 c4 10             	add    $0x10,%esp
820016cd:	8b 45 08             	mov    0x8(%ebp),%eax
820016d0:	8b 40 40             	mov    0x40(%eax),%eax
820016d3:	85 c0                	test   %eax,%eax
820016d5:	74 15                	je     820016ec <_reclaim_reent+0xa1>
820016d7:	8b 45 08             	mov    0x8(%ebp),%eax
820016da:	8b 40 40             	mov    0x40(%eax),%eax
820016dd:	83 ec 08             	sub    $0x8,%esp
820016e0:	50                   	push   %eax
820016e1:	ff 75 08             	pushl  0x8(%ebp)
820016e4:	e8 ef f9 ff ff       	call   820010d8 <_free_r>
820016e9:	83 c4 10             	add    $0x10,%esp
820016ec:	8b 45 08             	mov    0x8(%ebp),%eax
820016ef:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
820016f5:	85 c0                	test   %eax,%eax
820016f7:	74 50                	je     82001749 <_reclaim_reent+0xfe>
820016f9:	8b 45 08             	mov    0x8(%ebp),%eax
820016fc:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
82001702:	8b 55 08             	mov    0x8(%ebp),%edx
82001705:	81 c2 4c 01 00 00    	add    $0x14c,%edx
8200170b:	39 d0                	cmp    %edx,%eax
8200170d:	74 3a                	je     82001749 <_reclaim_reent+0xfe>
8200170f:	8b 45 08             	mov    0x8(%ebp),%eax
82001712:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
82001718:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200171b:	eb 1f                	jmp    8200173c <_reclaim_reent+0xf1>
8200171d:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001720:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82001723:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001726:	8b 00                	mov    (%eax),%eax
82001728:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200172b:	83 ec 08             	sub    $0x8,%esp
8200172e:	ff 75 e4             	pushl  -0x1c(%ebp)
82001731:	ff 75 08             	pushl  0x8(%ebp)
82001734:	e8 9f f9 ff ff       	call   820010d8 <_free_r>
82001739:	83 c4 10             	add    $0x10,%esp
8200173c:	8b 45 08             	mov    0x8(%ebp),%eax
8200173f:	05 4c 01 00 00       	add    $0x14c,%eax
82001744:	39 45 ec             	cmp    %eax,-0x14(%ebp)
82001747:	75 d4                	jne    8200171d <_reclaim_reent+0xd2>
82001749:	8b 45 08             	mov    0x8(%ebp),%eax
8200174c:	8b 40 54             	mov    0x54(%eax),%eax
8200174f:	85 c0                	test   %eax,%eax
82001751:	74 15                	je     82001768 <_reclaim_reent+0x11d>
82001753:	8b 45 08             	mov    0x8(%ebp),%eax
82001756:	8b 40 54             	mov    0x54(%eax),%eax
82001759:	83 ec 08             	sub    $0x8,%esp
8200175c:	50                   	push   %eax
8200175d:	ff 75 08             	pushl  0x8(%ebp)
82001760:	e8 73 f9 ff ff       	call   820010d8 <_free_r>
82001765:	83 c4 10             	add    $0x10,%esp
82001768:	8b 45 08             	mov    0x8(%ebp),%eax
8200176b:	8b 40 38             	mov    0x38(%eax),%eax
8200176e:	85 c0                	test   %eax,%eax
82001770:	74 36                	je     820017a8 <_reclaim_reent+0x15d>
82001772:	8b 45 08             	mov    0x8(%ebp),%eax
82001775:	8b 40 3c             	mov    0x3c(%eax),%eax
82001778:	83 ec 0c             	sub    $0xc,%esp
8200177b:	ff 75 08             	pushl  0x8(%ebp)
8200177e:	ff d0                	call   *%eax
82001780:	83 c4 10             	add    $0x10,%esp
82001783:	8b 45 08             	mov    0x8(%ebp),%eax
82001786:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
8200178c:	85 c0                	test   %eax,%eax
8200178e:	74 18                	je     820017a8 <_reclaim_reent+0x15d>
82001790:	8b 45 08             	mov    0x8(%ebp),%eax
82001793:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
82001799:	83 ec 08             	sub    $0x8,%esp
8200179c:	50                   	push   %eax
8200179d:	ff 75 08             	pushl  0x8(%ebp)
820017a0:	e8 6f fe ff ff       	call   82001614 <cleanup_glue>
820017a5:	83 c4 10             	add    $0x10,%esp
820017a8:	90                   	nop
820017a9:	c9                   	leave  
820017aa:	c3                   	ret    
